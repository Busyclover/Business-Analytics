boot_clust <- ClusterBootstrap( data = mtcars_scaled, k = 4,
clustermethod = "kmeanspp", iter.max = 100 )
boot_clust <- ClusterBootstrap( data = mtcars_scaled, k = 4, clustermethod = "kmeanspp",#
                                 nstart = 10, iter.max = 100 )
warnings()
mtcars_scaled
row.names(mtcars_scaled) <- NULL
mtcars_scaled
ClusterBootstrap <- function( data, k, noise.cut = 0, bootstrap = 100, #
                              dissolve = .5, clustermethod, ... )#
{#
    # step 1#
    cluster_result <- ClusterMethod( data = data, k = k, noise.cut = noise.cut, #
                                     clustermethod = clustermethod, ... )#
#
    cluster_num  <- cluster_result$clusternum#
    boot_jaccard <- matrix( 0, nrow = bootstrap, ncol = cluster_num )#
    # pass in two vectors containing TRUE and FALSE#
    # ( do not use built in intersect or union ! )#
    jaccardSimilarity <- function( x, y )#
    {#
        jaccard <- sum( x & y ) / ( sum(x) + sum(y) - sum( x & y ) )#
        return(jaccard)#
    }#
#
    n <- nrow(data)#
    for( i in 1:bootstrap )#
    {#
        # step 2, cluster the new sampled data #
        sampling  <- sample( n, n, replace = TRUE )#
        boot_data <- data[ sampling, ]#
#
        boot_result <- ClusterMethod( data = boot_data, k = k, noise.cut = noise.cut, #
                                      clustermethod = clustermethod, ... )#
        boot_num <- boot_result$clusternum#
#
        # step 3#
        for( j in 1:cluster_num )#
        {#
            # compare the original cluster with every other bootstrapped cluster#
            similarity <- sapply( 1:boot_num, function(k)#
            {#
                jaccard <- jaccardSimilarity( x = cluster_result$clusterlist[[j]][sampling],#
                                              y = boot_result$clusterlist[[k]] )#
            })#
#
            # return the largest jaccard similarity#
            boot_jaccard[ i, j ] <- max(similarity)#
        }   #
    }#
#
    # cluster's stability, mean of all the boostrapped jaccard similarity #
    boot_mean <- apply( boot_jaccard, 2, mean, na.rm = TRUE )#
#
    # how many times are each cluster's jaccard similarity below the #
    # specified "dissolved" value  #
    boot_dissolved <- apply( boot_jaccard, 2, function(x)#
    {#
        sum( x < dissolve, na.rm = TRUE )#
    })#
#
    boot_result <- list( result        = cluster_result$result,#
                         bootmean      = boot_mean,#
                         partition     = cluster_result$partition,#
                         clusternum    = cluster_num,                     #
                         bootdissolved = boot_dissolved )#
    return(boot_result)#
}
boot_clust <- ClusterBootstrap( data = mtcars_scaled, k = 4, clustermethod = "kmeanspp",#
                                 nstart = 10, iter.max = 100 )
boot_clust
?scale
library(ggplot2)#
library(plyr)#
library(dplyr)#
library(tidyr)
library(plyr)#
library(dplyr)#
library(tidyr)#
library(ggplot2)
source("/Users/ethen/Desktop/kmeans_caveat.R")
library(plyr)#
library(dplyr)#
library(tidyr)#
library(ggplot2)
?anscombe
anscombe
?n()
seq_len(n())
anscombe %>%#
mutate(observation = seq_len(n()))
anscombe %>%#
mutate( observation = seq_len( n() ) ) %>%#
gather( key, value, -observation )
anscombe %>%#
mutate( observation = seq_len( n() ) )
anscombe_tidy <- anscombe %>%#
mutate( observation = seq_len( n() ) ) %>%#
gather( key, value, -observation )
head(anscombe_tidy)
anscombe %>%#
mutate( observation = seq_len( n() ) ) %>%#
gather( key, value, -observation ) %>%#
separate( key, c( "variable", "set" ), 1, convert = TRUE )
anscombe_tidy
?separate
anscombe_tidy <- anscombe %>%#
mutate( observation = seq_len( n() ) ) %>%#
gather( key, value, -observation ) %>%#
separate( key, c( "variable", "set" ), 1, convert = TRUE )
sapply( anscombe_tidy, class )
anscombe_tidy <- anscombe %>%#
mutate( observation = seq_len( n() ) ) %>%#
gather( key, value, -observation ) %>%#
separate( key, c( "variable", "set" ), 1 )
sapply( anscombe_tidy, class )
anscombe %>%#
mutate( observation = seq_len( n() ) ) %>%#
gather( key, value, -observation ) %>%#
separate( key, c( "variable", "set" ), 1, convert = TRUE ) %>% #
mutate( set = c("I", "II", "III", "IV")[set])
anscombe
anscombe_tidy
anscombe %>%#
mutate( observation = seq_len( n() ) ) %>%#
gather( key, value, -observation ) %>%#
separate( key, c( "variable", "set" ), 1, convert = TRUE ) %>% # 1.#
mutate( set = c( "I", "II", "III", "IV" )[set] ) %>% # 2.#
spread( variable, value )
?spread
library(reshape2)
?dcast
anscombe
anscombe_tidy
dcast( variable ~ value, data = anscombe_tidy )
dcast( set ~ variable + value, data = anscombe_tidy )
?dcast
names(airquality) <- tolower(names(airquality))#
aqm <- melt(airquality, id=c("month", "day"), na.rm=TRUE)
aqm
head(aqm)
?dcast
names(ChickWeight) <- tolower(names(ChickWeight))#
aqm <- melt(ChickWeight, id=2:4, na.rm=TRUE)
head(aqm)
dcast(chick_m, diet + chick ~ time)
dcast(aqm , diet + chick ~ time)
x = data.frame(subject = c("John", "Mary"), #
               time = c(1,1),#
               age = c(33,NA),#
               weight = c(90, NA),#
               height = c(2,2))
x
molten = melt(x, id = c("subject", "time"), na.rm = TRUE)#
molten
dcast(molten, formula = time + subject ~ variable)
dcast(molten, formula = subject + time  ~ variable)
dcast(molten, formula = subject  ~ variable)
dcast(molten, formula = ...  ~ variable)
?dcast
anscombe
anscombe_tidy
dcast( observation + set ~ variable, data = anscombe_tidy, value.var = "value" )
anscombe_tidy <- anscombe %>%#
mutate( observation = seq_len( n() ) ) %>%#
gather( key, value, -observation ) %>%#
separate( key, c( "variable", "set" ), 1, convert = TRUE ) %>% # 1.#
mutate( set = c( "I", "II", "III", "IV" )[set] ) %>% # 2.#
spread( variable, value )
ggplot(anscombe_tidy, aes(x, y)) + geom_point() + facet_wrap(~ set) +#
geom_smooth(method = "lm", se = FALSE)
set.seed(2015)#
#
n <- 250#
c1 <- data_frame(x = rnorm(n), y = rnorm(n), cluster = 1)#
c2 <- data_frame(r = rnorm(n, 5, .25), theta = runif(n, 0, 2 * pi),#
                 x = r * cos(theta), y = r * sin(theta), cluster = 2) %>%#
    dplyr::select(x, y, cluster)
c1
c2
points1 <- rbind(c1, c2) %>% mutate( cluster = factor(cluster) )
points1
ggplot(points1, aes(x, y)) + geom_point()
?ungroup
?group
points1
ungroup(points1)
?augment
points1 %>% ungroup %>% dplyr::select(x, y)
points1  %>% dplyr::select(x, y)
clust <- points1  %>% dplyr::select(x, y) %>% kmeans(2)
clust
augment(clust, points1)
ggplot(augment(clust, points1), aes(x, y)) + geom_point(aes(color = .cluster)) +#
geom_point(aes(x1, x2), data = tidy(clust), size = 10, shape = "x") +#
labs(color = "K-means assignments")
?fortify
fortify(clust)
sizes <- c( 20, 100, 500 )
set.seed(2015)#
centers <- data_frame( x = c(1, 4, 6), #
                       y = c(5, 0, 6), #
                       n = sizes, #
                       cluster = factor(1:3) )#
#
points <- centers %>% group_by(cluster) %>%#
do(data_frame(x = rnorm(.$n, .$x), y = rnorm(.$n, .$y)))
?do
centers
?do
ggplot(points, aes(x, y)) + geom_point()
library(broom)
clust
points1
augment(clust, points1)
tidy(clust)
ggplot(augment(clust, points1), aes(x, y)) + geom_point(aes(color = .cluster)) +#
    geom_point(aes(x1, x2), data = tidy(clust), size = 10, shape = "x") +#
    labs(color = "K-means assignments")
clust
clust$cluster
?augment
centers %>% group_by(cluster)
points
?rnorm
library(ggplot2)#
#
# ----------------------------------------------------------------------------------#
# example 1#
setwd("/Users/ethen/Business-Analytics/1_finding_groups/data")#
rm( list = ls() )#
#
data_sku <- read.csv("DATA_2.01_SKU.csv")#
head(data_sku)#
#
# plot #
ggplot( data_sku, aes( CV, ADS ) ) + #
geom_point() + #
labs( title = "SKU Example", y = "Average Daily Sales", x = "Coefficient of Variation" ) + #
geom_hline( yintercept = 4, color = "blue" ) + #
geom_vline( xintercept = .2, color = "blue" )#
#
# hierarchical clustering #
#
d <- dist( scale(data_sku), method = "euclidean" )#
cluster <- hclust( d, method = "ward.D" )#
data_sku$groups  <- cutree( cluster, k = 3 )#
ggplot( data_sku, aes( CV, ADS, color = factor(groups) ) ) + #
geom_point() + #
labs( title = "SKU Example", y = "Average Daily Sales", x = "Coefficient of Variation" )
data_sku$groups  <- as.factor( cutree( cluster, k = 3 ) )#
ggplot( data_sku, aes( CV, ADS, color = groups ) ) + #
geom_point() + #
labs( title = "SKU Example", y = "Average Daily Sales", x = "Coefficient of Variation" )
data_hr <- read.csv("DATA_2.02_HR.csv")
data_hr
str(data_hr)
names(data_hr)
library(caret)
?findCorrelation
R1 <- structure(c(1, 0.86, 0.56, 0.32, 0.85, 0.86, 1, 0.01, 0.74, 0.32, #
                  0.56, 0.01, 1, 0.65, 0.91, 0.32, 0.74, 0.65, 1, 0.36,#
                  0.85, 0.32, 0.91, 0.36, 1), #
                .Dim = c(5L, 5L))
R1
colnames(R1) <- rownames(R1) <- paste0("x", 1:ncol(R1))#
R1
findCorrelation(R1, cutoff = .6, exact = FALSE)
findCorrelation(R1, cutoff = .6, exact = TRUE)
findCorrelation(R1, cutoff = .6, exact = TRUE, names = FALSE)
diag(rep(1, 5))
?findCorrelation
findCorrelation(R1, cutoff = .6, exact = FALSE, , verbose = TRUE)
cor(data_hr)
M <- abs( cor(data_hr) )
diag(M) <- 0
which( M > 0.8, arr.ind = TRUE )
R2 <- diag(rep(1, 5))#
R2[2, 3] <- R2[3, 2] <- .7#
R2[5, 3] <- R2[3, 5] <- -.7#
R2[4, 1] <- R2[1, 4] <- -.67#
#
corrDF <- expand.grid(row = 1:5, col = 1:5)#
corrDF$correlation <- as.vector(R2)#
levelplot(correlation ~ row + col, corrDF)
library(GGally)
?ggcorr
ggcorr( data_hr )
ggcorr( data_hr, nbreaks = 4, palette = "YlGnBu" )
ggcorr( data_hr, nbreaks = 4, palette = "RdGy" )
ggcorr( data_hr, nbreaks = 4, palette = "PuBuGn" )
ggcorr( data_hr, nbreaks = 4, palette = "Set2" )
ggcorr( data_hr, nbreaks = 4, palette = "Set1" )
ggcorr( data_hr, nbreaks = 3, palette = "Set1" )
d <- dist( scale(data_hr), method = "euclidean") #
cluster <- hclust( d, method = "ward.D" )
data_hr$groups <- cutree( cluster, k = 4 )
data_hr$groups
table(data_hr$groups)
data.frame( table(data_hr$groups) )
aggregate( ~ groups, data = data_hr, FUN = mean )
aggregate( .~ groups, data = data_hr, FUN = mean )
aggregate( .~ groups, data = data_hr, FUN = median )
ggcorr( data_hr, nbreaks = 3, palette = "BrBG" )
ggcorr( data_hr, nbreaks = 3 )
nbreaks = 3
seq( -1, 1, length.out = nbreaks + 1)
nbreaks %% 2
?%%
ggcorr( data_hr )
library(GGally)
ggcorr( data_hr, nbreaks = 3 )
ggcorr( data_hr, low = "brightred", mid = "lightgrey", high = "brightblue" )
ggcorr( data_hr, low = "red", mid = "grey", high = "lightblue" )
sessionInfo()
ggcorr( data_hr, nbreaks = 4 )
library(dplyr)
?funs
data_hr <- data_hr %>% mutate_each( funs(as.numeric) )
sapply(data_hr, class)
data_hr <- read.csv("DATA_2.02_HR.csv")#
str(data_hr)
ggcorr( data_hr, nbreaks = 4 )
data_hr
data_hr <- data_hr %>% mutate_each( funs(as.numeric) )
sapply(data_hr, class)
ggcorr( data_hr, nbreaks = 4 )
ggcorr( data_hr, nbreaks = 3 )
M <- abs( cor(data_hr) )#
# convert the correlation of oneself to 0#
diag(M) <- 0 #
# look that which index is highly correlated, or i.e. often appears together#
which( M > 0.8, arr.ind = TRUE )
?varImp
findCorrelation( cor(data_hr), cutoff = 0.8 )
findCorrelation( cor(data_hr), cutoff = 0.8 )
findCorrelation( cor(data_hr), cutoff = 0.8, names = TRUE )
ggplot( data_hr, aes( LPE, NP ) ) + #
geom_smooth( method = "lm" )
ggplot( data_hr, aes( LPE, NP ) ) + #
geom_smooth( method = "lm" ) + #
geom_point()
ggpairs(data_hr)
ggplot( data_hr, aes(LPE) ) + #
geom_histogram()
ggplot( data_hr, aes(NP) ) + #
geom_histogram()
hr_scaled <- scale(data_hr)
findCorrelation( cor(hr_scaled), cutoff = 0.8, names = TRUE )
hr_scaled
ggcorr( data_hr, nbreaks = 3 )
ggplot( data_hr, aes(LPE) ) + #
geom_histogram()
hr_scaled <- data.frame( scale(data_hr) )
ggplot( hr_scaled, aes(LPE) ) + #
geom_histogram()
ggplot( hr_scaled, aes(NP) ) + #
geom_histogram()
hr_scaled[ , 2:3 ]
library(reshape2)
melt( hr_scaled[ , 2:3 ] )
head( melt( hr_scaled[ , 2:3 ] ) )
ggplot( melt( hr_scaled[ , 2:3 ] ), aes( value, color = variable ) ) + #
geom_histogram()
ggplot( melt( hr_scaled[ , 2:3 ] ), aes( value, fill = variable ), alpha = .6 ) + #
geom_histogram()
ggplot( melt( hr_scaled[ , 2:3 ] ), aes( value, fill = variable ) ) + #
geom_histogram( alpha = .6 )
ggplot( melt( hr_scaled[ , 2:3 ] ), aes( value, fill = variable ) ) + #
geom_histogram( alpha = .4 )
ggplot( melt( hr_scaled[ , 2:3 ] ), aes( value ) ) + #
geom_histogram( aes( fill = variable ), alpha = .4 )
ggplot( melt( hr_scaled[ , 2:3 ] ), aes( value ) ) + #
geom_histogram( aes( fill = variable ), alpha = .2 )
ggplot( melt( hr_scaled[ , 2:3 ] ), aes( value ) ) + #
geom_histogram( aes( fill = variable ), alpha = .2, position="identity" )
ggplot( melt( hr_scaled[ , 2:3 ] ), aes( value, fill = variable ) ) + #
geom_histogram( alpha = .2, position = "identity" )
ggplot( melt( hr_scaled[ , 2:3 ] ), aes( value, fill = variable ) ) + #
geom_histogram( alpha = .6, position = "identity" )
ggplot( melt( hr_scaled[ , 2:3 ] ), aes( value, fill = variable ) ) + #
geom_histogram( alpha = .4, position = "identity" )
hr_agg
hr_agg <- aggregate( .~ groups, data = data_hr, FUN = median )
data_hr
d <- dist( , method = "euclidean") #
cluster <- hclust( d, method = "ward.D" )#
data_hr$groups <- cutree( cluster, k = 4 )
hr_agg <- aggregate( .~ groups, data = data_hr, FUN = median )
hr_agg
table(data_hr$groups)
tl <- table(data_hr$groups)
tl / sum(tl)
tl <- table(data_hr$groups)#
hr_agg$proportion <- tl / sum(tl)
hr_agg
d <- dist( , method = "euclidean") #
cluster <- hclust( d, method = "ward.D" )#
data_hr$groups <- cutree( cluster, k = 4 )#
#
# aggregation #
hr_agg <- aggregate( .~ groups, data = data_hr, FUN = median )
library(dplyr)
mutate( hr_agg, proportion = tl / sum(tl) ) %>%#
arrange( desc(proportion) )
hr_scaled
head(hr_scaled)
d <- dist( hr_scaled[ , -1 ], method = "euclidean" ) #
cluster <- hclust( d, method = "ward.D" )#
data_hr$groups <- cutree( cluster, k = 4 )
hr_agg <- aggregate( .~ groups, data = data_hr, FUN = median )
hr_agg
plot(cluster)
d <- dist( hr_scaled, method = "euclidean" ) #
cluster <- hclust( d, method = "ward.D" )#
plot(cluster)#
data_hr$groups <- cutree( cluster, k = 4 )#
#
# aggregation #
hr_agg <- aggregate( .~ groups, data = data_hr, FUN = median )#
#
# proportion size#
tl <- table(data_hr$groups)#
hr_agg$proportion <- tl / sum(tl)#
#
# order the aggregated table by proportion #
mutate( hr_agg, proportion = tl / sum(tl) ) %>%#
arrange( desc(proportion) )
library(dplyr);library(tidyr);library(ggplot2)#
#make some data#
data = mtcars[c(27,19,16),]#
data$model=row.names(data)#
#
#connvert data to long format and also rescale it into 0-1 scales#
data1 <- data %>% gather(measure,value,-model) %>% group_by(measure) %>% mutate(value1=(value-min(value))/(max(value)-min(value)))#
#
is.linear.polar <- function(coord) TRUE#
ggplot(data1,aes(x=measure,y=value1,color=model,group=model))+geom_line()+coord_polar()
sample <- dput( data_hr[ 1:10, ] )
sample
ggcorr( sample, nbreaks = 3 )
sample <- dput( data_hr[ 1:10, -5:6 ] )
sample <- dput( data_hr[ 1:10, -c(5,6) ] )
ggcorr( sample, nbreaks = 3 )
ggcorr( sample, nbreaks = 5 )
?fortify
is.linear.polar <- function(coord) TRUE#
ggplot(data1,aes(x=measure,y=value1,color=model,group=model))+geom_line()+coord_polar()#
coord_radar <- function(...) {#
  structure(coord_polar(...), class = c("radar", "polar", "coord"))#
}#
is.linear.radar <- function(coord) TRUE#
#
mtcars$id <- row.names(mtcars)#
#
mtcars[, c(1:5)] <- llply(mtcars[, c(1:5)], function(i) scale(i))#
#
mtcarsm <- melt(mtcars[, c(1:5, ncol(mtcars))], id.vars  = "id")#
ggplot() + geom_polygon(aes(x = variable, y = value, group = id), #
                     data = mtcarsm[mtcarsm$id %in% unique(mtcarsm$id)[1:4],]) + #
           coord_radar() + #
           facet_wrap(~id, ncol = 2)
library(plyr)
library(dplyr)
is.linear.polar <- function(coord) TRUE#
ggplot(data1,aes(x=measure,y=value1,color=model,group=model))+geom_line()+coord_polar()#
coord_radar <- function(...) {#
  structure(coord_polar(...), class = c("radar", "polar", "coord"))#
}#
is.linear.radar <- function(coord) TRUE#
#
mtcars$id <- row.names(mtcars)#
#
mtcars[, c(1:5)] <- llply(mtcars[, c(1:5)], function(i) scale(i))#
#
mtcarsm <- melt(mtcars[, c(1:5, ncol(mtcars))], id.vars  = "id")#
ggplot() + geom_polygon(aes(x = variable, y = value, group = id), #
                     data = mtcarsm[mtcarsm$id %in% unique(mtcarsm$id)[1:4],]) + #
           coord_radar() + #
           facet_wrap(~id, ncol = 2)
ggplot() + geom_line(aes(x = variable, y = value, group = id), #
                     data = mtcarsm[mtcarsm$id %in% unique(mtcarsm$id)[1:4],]) + #
           coord_radar() + #
           facet_wrap(~id, ncol = 2)
?coord_radar
ggplot() + geom_line(aes(x = variable, y = value, group = id), #
                     data = mtcarsm[mtcarsm$id %in% unique(mtcarsm$id)[1:4],]) + #
           coord_polar() + #
           facet_wrap(~id, ncol = 2)
?coord_polar
mtcars
as.data.frame(lapply(mtcars, ggplot2:::rescale01))
mtcarsscaled <- data.frame( scale(mtcars) )
mtcarsscaled <- data.frame( scale(mtcars[, -"id"]) )
mtcarsscaled <- data.frame( scale(mtcars[, -c("id")]) )
ncol(mtcars)
mtcarsscaled <- data.frame( scale(mtcars[, -12])  )
mtcarsscaled$model <- rownames(mtcars)#
mtcarsmelted <- reshape2::melt(mtcarsscaled)
mtcarsscaled
mtcarsmelted <- reshape2::melt(mtcarsscaled, id.vars = "model" )
ggplot(mtcarsmelted, aes(x = variable, y = value)) +#
  geom_line(aes(group = model, color = model), fill = NA, size = 2) +#
  theme(strip.text.x = element_text(size = rel(0.8)),#
        axis.text.x = element_text(size = rel(0.8)),#
        axis.ticks.y = element_blank(),#
        axis.text.y = element_blank()) +#
  xlab("") + ylab("") +#
  guides(color = guide_legend(ncol=2))
ggplot(mtcarsmelted, aes(x = variable, y = value)) +#
  geom_line(aes(group = model, color = model), fill = NA, size = 2) +#
  facet_wrap(~ model) +#
  theme(axis.ticks.x = element_blank(),#
        axis.text.x = element_blank(),#
        axis.ticks.y = element_blank(),#
        axis.text.y = element_blank()) +#
  xlab("") + ylab("") +#
  guides(color = "none")
ggplot(mtcarsmelted, aes(x = variable, y = value)) +#
  geom_line(aes(group = model, color = model), fill = NA, size = 2) +#
  theme(strip.text.x = element_text(size = rel(0.8)),#
        axis.text.x = element_text(size = rel(0.8)),#
        axis.ticks.y = element_blank(),#
        axis.text.y = element_blank()) +#
  xlab("") + ylab("") +#
  guides(color = guide_legend(ncol=2)) +#
  coord_polar()
ggplot(mtcarsmelted, aes(x = variable, y = value)) +#
  geom_line(aes(group = model, color = model), fill = NA, size = 2) +#
  facet_wrap(~ model) +#
  theme(axis.ticks.x = element_blank(),#
        axis.text.x = element_blank(),#
        axis.ticks.y = element_blank(),#
        axis.text.y = element_blank()) +#
  xlab("") + ylab("") +#
  guides(color = "none") +#
  coord_polar()
ggplot(mtcarsmelted, aes(x = variable, y = value)) +#
  geom_polygon(aes(group = model, color = model), fill = NA, size = 2) +#
  facet_wrap(~ model) +#
  theme(axis.ticks.x = element_blank(),#
        axis.text.x = element_blank(),#
        axis.ticks.y = element_blank(),#
        axis.text.y = element_blank()) +#
  xlab("") + ylab("") +#
  guides(color = "none") +#
  coord_radar()
sessionInfo()

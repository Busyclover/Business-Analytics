model.matrix(model_glin)
?model.matrix
library(ROCR)
data(ROCR.simple)
ROCR.simple
pred <- prediction( ROCR.simple$predictions, ROCR.simple$labels )
perf <- performance(pred,"tpr","fpr")#
plot(perf)
perf
perf1 <- performance(pred, "prec", "rec")#
plot(perf1)
class(perf)
plot.performance
plot.ROCR
library(ggplot2)
perf@x.values
df <- data.frame( x = perf@x.values[[1]], y = perf@y.values[[1]] )
ggplot( df, aes( x = x, y = y ) ) + #
geom_line()
library(plyr)#
library(randomForest)
rfNews()
data <- iris
data
k <- 5
sample( 1:k, nrow(data) )
sample( 1:k, nrow(data), replace = TRUE )
?randomForest
?formula
library(caret)
head(data)
?createFolds
folds <- createFolds( data$Sepal.Length, k = 5, list = TRUE, returnTrain = FALSE )
folds
folds[[1]]
test  <- data[ folds[[1]], ]
test
train <- data[ -folds[[1]], ]#
  test  <- data[ folds[[1]], ]
model <- randomForest( trainingset$Sepal.Length ~ ., data = train, ntree = 100 )
train$Sepal.Length
model <- randomForest( train$Sepal.Length ~ ., data = train, ntree = 100 )
model
data.frame( predict( model, test[ , -1 ] ) )
predict( model, test[ , -1 ] )
prediction <- vector( mode = "list", length = k )
actual <- vector( mode = "list", length = k )
prediction <- vector( mode = "list", length = k )#
actual <- vector( mode = "list", length = k ) #
#
#Creating a progress bar to know the status of CV#
progress.bar <- create_progress_bar("text")#
progress.bar$init(k)#
#
for( i in 1:k )#
{#
    # train / test #
    train <- data[ -folds[[i]], ]#
    test  <- data[ folds[[i]], ]#
#
    # run a random forest model#
    model <- randomForest( train$Sepal.Length ~ ., data = train, ntree = 100 )#
    # remove response column 1, Sepal.Length, and predict#
    prediction[[i]] <- data.frame( predicted = predict( model, test[ , -1 ] ) )#
    # append this iteration's test set to the test set copy data frame#
    # keep only the Sepal Length Column#
    actual[[i]] <- data.frame( actual = testset[ , 1 ] )#
    progress.bar$step()#
}
progress.bar <- create_progress_bar("text")#
progress.bar$init(k)#
#
for( i in 1:k )#
{#
    # train / test #
    train <- data[ -folds[[i]], ]#
    test  <- data[ folds[[i]], ]#
#
    # run a random forest model#
    model <- randomForest( train$Sepal.Length ~ ., data = train, ntree = 100 )#
    # remove response column 1, Sepal.Length, and predict#
    prediction[[i]] <- data.frame( predicted = predict( model, test[ , -1 ] ) )#
    # append this iteration's test set to the test set copy data frame#
    # keep only the Sepal Length Column#
    actual[[i]] <- data.frame( actual = test[ , 1 ] )#
    progress.bar$step()#
}
prediction
df <- data.frame( predicted = bind_rows(prediction), actual = bind_rows(actual) )
library(dplyr)
df <- data.frame( predicted = bind_rows(prediction), actual = bind_rows(actual) )
df
abs( df$actual - df$predicted )
summary(result$difference)
result$difference <- abs( df$actual - df$predicted )#
#
# mean absolute error as evaluation #
summary(result$difference)
df$difference <- abs( df$actual - df$predicted )#
#
# mean absolute error as evaluation #
summary(df$difference)
prediction <- vector( mode = "list", length = k )#
actual <- vector( mode = "list", length = k ) #
#
# creates a progress bar to know the status of CV#
progress.bar <- create_progress_bar("text")#
progress.bar$init(k)#
#
for( i in 1:k )#
{#
    # train / test #
    train <- data[ -folds[[i]], ]#
    test  <- data[ folds[[i]], ]#
#
    # run a random forest model#
    model <- randomForest( train$Sepal.Length ~ ., data = train, ntree = 200 )#
    # remove response column 1, Sepal.Length, and predict#
    prediction[[i]] <- data.frame( predicted = predict( model, test[ , -1 ] ) )#
    # append this iteration's test set to the test set copy data frame#
    # keep only the Sepal Length Column#
    actual[[i]] <- data.frame( actual = test[ , 1 ] )#
    progress.bar$step()#
}#
#
df <- data.frame( predicted = bind_rows(prediction), actual = bind_rows(actual) )#
#
df$difference <- abs( df$actual - df$predicted )#
#
# mean absolute error as evaluation #
summary(df$difference)
library(ggplot2)#
#
# example data frame#
delivery.df <-  data.frame(#
#
    Service     = c( rep("Carrier 1", 15), rep("Carrier 2", 15), rep("Carrier 3", 15) ),#
    Destination = c( rep( c("Office 1", "Office 2", "Office 3", "Office 4", "Office 5" ), 9 ) ),#
    Time = c( 15.23, 14.32, 14.77, 15.12, 14.05,#
    15.48, 14.13, 14.46, 15.62, 14.23, 15.19, 14.67, 14.48, 15.34, 14.22,#
    16.66, 16.27, 16.35, 16.93, 15.05, 16.98, 16.43, 15.95, 16.73, 15.62,#
    16.53, 16.26, 15.69, 16.97, 15.37, 17.12, 16.65, 15.73, 17.77, 15.52,#
    16.15, 16.86, 15.18, 17.96, 15.26, 16.36, 16.44, 14.82, 17.62, 15.04)#
)#
#
# display the data, delivery time between three services, across five offices #
ggplot( delivery.df, aes( x = Destination, y = Time, color = Service ) ) + #
geom_point()#
#
# the plot shows a general pattern of carrier 1 having a shorter delivery time#
# use a anova test to confirm if there're differences between five offices#
#
delivery.mod1 <- aov( Time ~ Destination + Service, data = delivery.df )#
summary(delivery.mod1)#
#
# test to see if there is interaction between the destination and service#
delivery.mod2 <- aov( Time ~ Destination * Service, data = delivery.df )#
summary(delivery.mod2)#
#
# model.tables works well with anova analysis#
model.tables( delivery.mod2, "means", se = TRUE )
delivery.res$M2.Fit   <- fitted(delivery.mod2)#
delivery.res$M2.Resid <- resid(delivery.mod2)#
#
# plot them to see if there're patterns#
ggplot(delivery.res, aes( M2.Fit, M2.Resid, color = Service ) ) + #
geom_point() +#
xlab("Fitted Values") + #
ylab("Residuals")
delivery.res <- delivery.df#
#
# store the fitted value and residuals#
delivery.res$M2.Fit   <- fitted(delivery.mod2)#
delivery.res$M2.Resid <- resid(delivery.mod2)#
#
# plot them to see if there're patterns#
ggplot(delivery.res, aes( M2.Fit, M2.Resid, color = Service ) ) + #
geom_point() +#
xlab("Fitted Values") + #
ylab("Residuals")
ggplot( delivery.res, aes( sample = M1.Resid ) ) + #
stat_qq()
summary(delivery.mod2)
ggplot( delivery.res, aes( sample = M2.Resid ) ) + #
stat_qq()
library(dplyr)#
library(tidyr)#
library(caret)#
library(scales)#
library(ggplot2)#
library(gridExtra)#
library(lubridate)#
library(data.table)#
setwd("/Users/ethen/Business-Analytics/2_bike_sharing/data")#
#
data <- fread("train.csv")
data
cor( select( data, casual, registered, temp:windspeed ) )
library(rpart)#
library(rattle)#
library(rpart.plot)#
#
# add a hour and weekday column #
data[ , c( "hour", "weekday" ) := list( hour(datetime), #
                                        lubridate::wday(datetime) ) ]#
#
# split into 80 / 20 percent and evaluate prediction accuracy on test set #
train_index <- createDataPartition( data$count, p = .8, list = FALSE )#
data_train  <- data[ train_index, ]#
data_test   <- data[ -train_index, ]#
#
# use a decision tree to convert the hours into proper bins #
# for registered users#
tree_registered <- rpart( registered ~ hour, data = data_train )#
fancyRpartPlot(tree_registered)#
#
data$hour_registered <- with( data, #
#
    ifelse( hour < 6.5, 1, #
    ifelse( hour >= 20, 2, #
    ifelse( hour >= 16 & hour < 18, 3,#
    ifelse( hour >= 18, 4,#
    ifelse( hour >= 8.5, 5,#
    ifelse( hour < 8.5 & hour >= 7.5, 6, 7 ) ) ) ) ) )#
)
tree_casual <- rpart( casual ~ hour, data = data_train )#
fancyRpartPlot(tree_casual)
fancyRpartPlot(tree_registered)
data$hour_registered <- with( data, #
#
    ifelse( hour <  6.5, 1, #
    ifelse( hour >= 20,  2, #
    ifelse( hour >= 16  & hour <  18,  3,#
    ifelse( hour >= 18  & hour <  20,  4,#
    ifelse( hour >= 8.5 & hour <  16,  5,#
    ifelse( hour <  8.5 & hour >= 7.5, 6, 7 ) ) ) ) ) )#
)
data$hour_casual <- with( data, #
#
    ifelse( hour < 8.5, 1, #
    ifelse( hour >= 20, 2, #
    ifelse( hour >= 8.5 & hour < 10, 3,#
    ifelse( hour >= 10 & hour < 20, 4 ) ) ) )#
)
fancyRpartPlot(tree_casual)
fancyRpartPlot(tree_registered)
data$hour_casual <- with( data, #
#
    ifelse( hour < 8.5, 1, #
    ifelse( hour >= 20, 2, #
    ifelse( hour >= 8.5 & hour < 10, 3, 4 )#
)
) )
data
library(dplyr)#
library(tidyr)#
library(caret)#
library(rpart)#
library(rattle)#
library(scales)#
library(ggplot2)#
library(gridExtra)#
library(lubridate)#
library(rpart.plot)#
library(data.table)#
setwd("/Users/ethen/Business-Analytics/2_bike_sharing/data")#
#
data <- fread("train.csv")#
# ----------------------------------------------------------------------------#
#                       Exploratory Data Analysis #
# ----------------------------------------------------------------------------#
#
# two main goals of exploratoy data analysis#
# 1. knowing the distribution of our data more. Check for missing values, #
#    and outliers, so that we can know whether they'll be needing transformations#
#    or included (excluded) for the modeling #
# 2. discover the relationships between target (dependent) variables or predictors#
#    (independent), which can be used for feature selection#
#
# --------------------------------------------------------#
# a quick check on if there's any na value for each column#
sapply( data, function(y) sum( is.na(y) ) )#
#
# plot a histogram for numeric independent variables to visualize and understand the distribution #
independent <- c( "casual", "registered", "count" )#
columns <- which( !names(data) %in% independent & sapply( data, is.numeric ) )#
#
histogram <- lapply( names(columns), function(column)#
{#
    ggplot( data[ , column, with = FALSE ], aes_string( column ) ) + #
    geom_histogram()#
})#
do.call( grid.arrange, histogram )#
#
# from the visualization #
# we can see that four variables including temp, atemp, humidity and windspeed are continuous variables#
# and values are normally distributed#
# the weather variable shows that most of the days are clear (1)#
# the holiday variable consists mainly of 0 tells you most days are not considered as holidays#
# and most value of 1 for workday tells you most days are neither weekends or holidays#
# Season has four categories ranging from 1 to 4 that are equally distributed#
# check the correlation of the continuous variables with the independent variables#
cor( select( data, casual, registered, temp:windspeed ) ) %>%#
findCorrelation( cutoff = .85, name = TRUE )#
# --------------------------------------------------------#
# hypothesis test#
#
# 1. hourly trend#
# convert datetime column to date type#
data[ , datetime := ymd_hms(datetime) ]#
#
# extract the datetime; and casual, registered column #
subdata1 <- select( data, datetime, casual, registered ) %>%#
            tbl_dt() %>%#
            mutate( datetime = hour(datetime) ) %>%#
            gather( "user", "count", -1 )#
#
# box plot for registered and unregisted users#
ggplot( subdata1, aes( datetime, count, group = datetime, fill = user ) ) + #
geom_boxplot() + #
facet_wrap( ~ user ) +#
scale_fill_discrete( limit = c( "registered", "casual" ) ) + #
guides( fill = FALSE ) + #
ggtitle( "2011-2012 User's Hourly Bike Demand" )#
#
# to be specific #
# The "dots" at the end of the boxplot represent outliers. Which is determined by #
# checking if a data point is:#
# less than Q1 - 1.5 * IQR or greater than Q3 + 1.5 * IQR, where IQR stands for interquartile range = Q3 - Q1#
# And the line goes to the first data point before the the cut-off. #
# Notice the outliers, log transformation#
#
# the registered users' behavior can be categorized into three groups#
# 2. daily trend #
subdata2 <- select( data, datetime, casual, registered ) %>%#
            tbl_dt() %>%#
            mutate( datetime = lubridate::wday( datetime, label = TRUE ) ) %>%#
            gather( "user", "count", -1 ) %>%#
            group_by( datetime, user ) %>%#
            summarise( count = sum(count) )#
#
# registered and unregisted users#
ggplot( subdata2, aes( datetime, count, group = user, color = user ) ) + #
geom_line( size = 1 ) + geom_point( size = 3 ) + #
scale_y_continuous( label = comma ) +#
scale_colour_discrete( limit = c( "registered", "casual" ) ) + #
ggtitle( "2011-2012 User's Daily Bike Demand" )#
# 3. trend of bike demand over year #
subdata3 <- select( data, datetime, casual, registered ) %>%#
            tbl_dt() %>%#
            mutate( datetime = year(datetime) ) %>%#
            gather( "user", "count", -1 ) %>% #
            group_by( datetime, user ) %>%#
            summarise( count = sum(count) )#
#
ggplot( subdata3, aes( datetime, count, fill = user ) ) + #
geom_bar( stat = "identity", position = "dodge", width = .6 ) + #
geom_text( aes( label = count ), position = position_dodge(.6), vjust = -.6, size = 3 ) +#
scale_x_continuous( breaks = unique(subdata3$datetime) ) + #
scale_y_continuous( label = comma ) +#
scale_fill_discrete( limit = c( "registered", "casual" ) ) +#
ggtitle( "2011-2012 Bike Demand of Users" ) #
# increase of bike demand #
# from the exploratory analysis section we can tell that#
# the behaviors of the registered and non-registered users are totally different#
# thus for the following two section, feauture engineering and model training#
# we'll treat registered users and one for non-registered users differently#
# and add up the final result#
# ----------------------------------------------------------------------------#
#                       Feature Engineering#
# ----------------------------------------------------------------------------#
# add a hour and weekday column #
data[ , c( "hour", "weekday" ) := list( hour(datetime), #
                                        lubridate::wday(datetime) ) ]#
#
# split into 80 / 20 percent and evaluate prediction accuracy on test set #
train_index <- createDataPartition( data$count, p = .8, list = FALSE )#
data_train  <- data[ train_index, ]#
data_test   <- data[ -train_index, ]
data_train$hour_registered <- with( data_train, #
#
    ifelse( hour <  6.5, 1, #
    ifelse( hour >= 20,  2, #
    ifelse( hour >= 16  & hour <  18,  3,#
    ifelse( hour >= 18  & hour <  20,  4,#
    ifelse( hour >= 8.5 & hour <  16,  5,#
    ifelse( hour <  8.5 & hour >= 7.5, 6, 7 ) ) ) ) ) )#
)
data_train$hour_casual <- with( data_train, #
#
    ifelse( hour < 8.5, 1, #
    ifelse( hour >= 20, 2, #
    ifelse( hour >= 8.5 & hour < 10, 3, 4 ) ) )#
)
data_train
data
data_train
tree_registered <- rpart( registered ~ weekday, data = data_train )#
fancyRpartPlot(tree_registered)
data[ , c( "hour", "weekday", "year", "month" ) := list( hour(datetime), #
                                                         lubridate::wday(datetime),#
                                                         year(datetime),#
                                                         month(datetime) ) ]
train_index <- createDataPartition( data$count, p = .8, list = FALSE )#
data_train  <- data[ train_index, ]#
data_test   <- data[ -train_index, ]
data_train
sapply( data_train, class )
data$year_part[data$year== 2011 ]
data
data$year== 2011
data_train$year_bins <- with( data_train#
#
    ifelse( year == 2011 & month <= 3, 1,#
    ifelse( year == 2011 & month >  3 & month <= 6, 2,#
    ifelse( year == 2011 & month >  6 & month <= 9, 3,#
    ifelse( year == 2011 & month >  9, 4,#
    ifelse( year == 2012 & month <= 3, 5,#
    ifelse( year == 2012 & month >  3 & month <= 6, 6#
    ifelse( year == 2012 & month >  6 & month <= 9, 7, 8 ) ) ) ) ) ) )#
)
data_train$year_bins <- with( data_train#
#
    ifelse( year == 2011 & month <= 3, 1,#
    ifelse( year == 2011 & month >  3 & month <= 6, 2,#
    ifelse( year == 2011 & month >  6 & month <= 9, 3,#
    ifelse( year == 2011 & month >  9, 4,#
    ifelse( year == 2012 & month <= 3, 5,#
    ifelse( year == 2012 & month >  3 & month <= 6, 6,#
    ifelse( year == 2012 & month >  6 & month <= 9, 7, 8 ) ) ) ) ) ) )#
)
data_train
data_train$year_bins <- with( data_train#
#
    ifelse( year == 2011 & month <= 3, 1,#
    ifelse( year == 2011 & month >  3 & month <= 6, 2,#
    ifelse( year == 2011 & month >  6 & month <= 9, 3,#
    ifelse( year == 2011 & month >  9, 4,#
    ifelse( year == 2012 & month <= 3, 5,#
    ifelse( year == 2012 & month >  3 & month <= 6, 6,#
    ifelse( year == 2012 & month >  6 & month <= 9, 7, 8 ) ) ) ) ) ) )#
)
with( data_train#
#
    ifelse( year == 2011 & month <= 3, 1, 2 )#
)
year == 2011 & month <= 3
data_train$year == 2011 & data_train$month <= 3
ifelse( data_train$year == 2011 & data_train$month <= 3, 1, 2 )
data_train$year_bins <- with( data_train,#
#
    ifelse( year == 2011 & month <= 3, 1,#
    ifelse( year == 2011 & month >  3 & month <= 6, 2,#
    ifelse( year == 2011 & month >  6 & month <= 9, 3,#
    ifelse( year == 2011 & month >  9, 4,#
    ifelse( year == 2012 & month <= 3, 5,#
    ifelse( year == 2012 & month >  3 & month <= 6, 6,#
    ifelse( year == 2012 & month >  6 & month <= 9, 7, 8 ) ) ) ) ) ) )#
)
data_train
variables <- c( "weather", "temp", "humidity", "windspeed", "type", "year_bins" )
select( data_train, "casual", "registered", variable )
select( data_train, "casual", "registered", variables )
select_( data_train, "casual", "registered", variables )
variables
select_( data_train, c( "casual", "registered", variables ) )
select( data_train, one_of( c( "casual", "registered", variables ) ) )
c( "casual", "registered", variables )
colnames( data_train ) %in% c( "casual", "registered", variables )
select( data_train, columns )
columns
columns <- colnames( data_train ) %in% c( "casual", "registered", variables )#
    select( data_train, columns )
columns
select( data_train, which(columns) )
variables <- c( "weather", "temp", "humidity", "windspeed", #
                "type", "year_bins", "hour_registered", "hour_casual" )
columns <- colnames(data_train) %in% c( "casual", "registered", variables )#
    select( data_train, which(columns) )
columns
data_train$hour_registered <- with( data_train, #
#
        ifelse( hour <  6.5, 1, #
        ifelse( hour >= 20 , 2, #
        ifelse( hour >= 16  & hour <  18 , 3,#
        ifelse( hour >= 18  & hour <  20 , 4,#
        ifelse( hour >= 8.5 & hour <  16 , 5,#
        ifelse( hour <  8.5 & hour >= 7.5, 6, 7 ) ) ) ) ) )#
    )#
    # non-registered #
    data_train$hour_casual <- with( data_train, #
#
        ifelse( hour <  8.5, 1, #
        ifelse( hour >= 20 , 2, #
        ifelse( hour >= 8.5 & hour < 10, 3, 4 ) ) )#
    )#
#
    # 2. year bins, demand increases over time ; #
    #    thus create bins for every quarter of the two years ( 8 in total )#
    data_train$year_bins <- with( data_train,#
#
        ifelse( year == 2011 & month <= 3, 1,#
        ifelse( year == 2011 & month >  3 & month <= 6, 2,#
        ifelse( year == 2011 & month >  6 & month <= 9, 3,#
        ifelse( year == 2011 & month >  9, 4,#
        ifelse( year == 2012 & month <= 3, 5,#
        ifelse( year == 2012 & month >  3 & month <= 6, 6,#
        ifelse( year == 2012 & month >  6 & month <= 9, 7, 8 ) ) ) ) ) ) )#
    )#
#
    # 3. convert holiday and workingday into one variable#
    #    indicating whether its a holiday, weekend and workday and #
    #    transform it to factor  #
    data_train$type <- with( data_train, #
#
        ifelse( holiday == 1, "holiday",#
        ifelse( holiday == 0 & workingday == 0, "weekend", "workday" ) ) #
    )
columns <- colnames(data_train) %in% c( "casual", "registered", variables )#
    select( data_train, which(columns) )
factor_col <- c( "weather", "hour_casual", "hour_registered", "year_bins", "type" )
columns <- which( colnames(data_train) %in% c( "casual", "registered", variables ) )#
    data_train <- select( data_train, columns )#
    factor_col <- which( colnames(data_train) %in% c( "weather", "hour_casual", "hour_registered", "year_bins", "type" ) )
factor_col <- which( colnames(data_train) %in% c( "weather", "hour_casual", "hour_registered", "year_bins", "type" ) )                #
    data_train <- modifyList( data_train, lapply( data_train[ , factor_col ], as.factor ) )
sapply( data_train ,class)
factor_col
data_train[ , factor_col ]
columns <- which( colnames(data_train) %in% c( "casual", "registered", variables ) )#
    data_train <- data_train[ ,columns ]#
    factor_col <- which( colnames(data_train) %in% c( "weather", "hour_casual", "hour_registered", "year_bins", "type" ) )                #
    data_train <- modifyList( data_train, lapply( data_train[ ,factor_col ], as.factor ) )
factor_col
columns <- which( colnames(data_train) %in% c( "casual", "registered", variables ) )#
    data_train <- select( data_train, columns )
data_train
set.seed(1234) #
train_index <- createDataPartition( data$count, p = .8, list = FALSE )#
data_train  <- data[ train_index, ]#
data_test   <- data[ -train_index, ]
tree_registered <- rpart( registered ~ hour, data = data_train )#
fancyRpartPlot(tree_registered)
data_train$hour_registered <- with( data_train, #
#
        ifelse( hour <  6.5, 1, #
        ifelse( hour >= 20 , 2, #
        ifelse( hour >= 16  & hour <  18 , 3,#
        ifelse( hour >= 18  & hour <  20 , 4,#
        ifelse( hour >= 8.5 & hour <  16 , 5,#
        ifelse( hour <  8.5 & hour >= 7.5, 6, 7 ) ) ) ) ) )#
    )#
    # non-registered #
    data_train$hour_casual <- with( data_train, #
#
        ifelse( hour <  8.5, 1, #
        ifelse( hour >= 20 , 2, #
        ifelse( hour >= 8.5 & hour < 10, 3, 4 ) ) )#
    )#
#
    # 2. year bins, demand increases over time ; #
    #    thus create bins for every quarter of the two years ( 8 in total )#
    data_train$year_bins <- with( data_train,#
#
        ifelse( year == 2011 & month <= 3, 1,#
        ifelse( year == 2011 & month >  3 & month <= 6, 2,#
        ifelse( year == 2011 & month >  6 & month <= 9, 3,#
        ifelse( year == 2011 & month >  9, 4,#
        ifelse( year == 2012 & month <= 3, 5,#
        ifelse( year == 2012 & month >  3 & month <= 6, 6,#
        ifelse( year == 2012 & month >  6 & month <= 9, 7, 8 ) ) ) ) ) ) )#
    )#
#
    # 3. convert holiday and workingday into one variable#
    #    indicating whether its a holiday, weekend and workday#
    data_train$type <- with( data_train, #
#
        ifelse( holiday == 1, "holiday",#
        ifelse( holiday == 0 & workingday == 0, "weekend", "workday" ) ) #
    )#
#
    # keep the needed variables, and convert discrete variables into factors #
    columns <- which( colnames(data_train) %in% c( "casual", "registered", variables ) )#
    data_train <- select( data_train, columns )
factor_col <- which( colnames(data_train) %in% c( "weather", "hour_casual", "hour_registered", "year_bins", "type" ) )                #
    data_train <- modifyList( data_train, lapply( select( data_train, factor_col ) as.factor ) )
data_train <- modifyList( data_train, lapply( select( data_train, factor_col ), as.factor ) )
sapply( data_train )
sapply( data_train, class )
data_train
data[ , c( "hour", "weekday", "year", "month" ) := list( hour(datetime), #
                                                         lubridate::wday(datetime),#
                                                         year(datetime),#
                                                         month(datetime) ) ]#
#
# split into 80 / 20 percent and evaluate prediction accuracy on test set#
set.seed(1234) #
train_index <- createDataPartition( data$count, p = .8, list = FALSE )#
data_train  <- data[ train_index, ]#
data_test   <- data[ -train_index, ]#
rm(data)#
# --------------------------------------------------------------#
# 1. hour, illustrate the splitting in the [ExtractFeatures] function #
# use a decision tree to convert the hours into proper bins #
# for registered users#
tree_registered <- rpart( registered ~ hour, data = data_train )#
fancyRpartPlot(tree_registered)#
#
# for non-registered users#
tree_casual <- rpart( casual ~ hour, data = data_train )#
fancyRpartPlot(tree_casual)#
# list of the independent variables #
variables <- c( "weather", "temp", "humidity", "windspeed", #
                "type", "year_bins", "hour_registered", "hour_casual" )#
#
# putting it all together #
ExtractFeatures <- function( data )#
{#
    # 1. hour bins#
    # registered users #
    data$hour_registered <- with( data, #
#
        ifelse( hour <  6.5, 1, #
        ifelse( hour >= 20 , 2, #
        ifelse( hour >= 16  & hour <  18 , 3,#
        ifelse( hour >= 18  & hour <  20 , 4,#
        ifelse( hour >= 8.5 & hour <  16 , 5,#
        ifelse( hour <  8.5 & hour >= 7.5, 6, 7 ) ) ) ) ) )#
    )#
    # non-registered #
    data$hour_casual <- with( data, #
#
        ifelse( hour <  8.5, 1, #
        ifelse( hour >= 20 , 2, #
        ifelse( hour >= 8.5 & hour < 10, 3, 4 ) ) )#
    )#
#
    # 2. year bins, demand increases over time ; #
    #    thus create bins for every quarter of the two years ( 8 in total )#
    data$year_bins <- with( data,#
#
        ifelse( year == 2011 & month <= 3, 1,#
        ifelse( year == 2011 & month >  3 & month <= 6, 2,#
        ifelse( year == 2011 & month >  6 & month <= 9, 3,#
        ifelse( year == 2011 & month >  9, 4,#
        ifelse( year == 2012 & month <= 3, 5,#
        ifelse( year == 2012 & month >  3 & month <= 6, 6,#
        ifelse( year == 2012 & month >  6 & month <= 9, 7, 8 ) ) ) ) ) ) )#
    )#
#
    # 3. convert holiday and workingday into one variable#
    #    indicating whether its a holiday, weekend and workday#
    data$type <- with( data, #
#
        ifelse( holiday == 1, "holiday",#
        ifelse( holiday == 0 & workingday == 0, "weekend", "workday" ) ) #
    )#
#
    # keep the needed variables, and convert discrete variables into factors #
    columns <- which( colnames(data) %in% c( "casual", "registered", variables ) )#
    data <- select( data, columns )#
    factor_col <- which( colnames(data) %in% #
                         c( "weather", "hour_casual", "hour_registered", "year_bins", "type" ) )                  #
    data <- modifyList( data, lapply( select( data, factor_col ), as.factor ) )#
    return(data)#
}#
data_train <- ExtractFeatures( data = data_train )
data_train
sapply( data_train, class )
library(randomForest)
variable
variables
paste( "casual ~ " paste( variables, collapse = "+" ) )
paste( "casual ~ ", paste( variables, collapse = "+" ) )
paste( "casual ~ ", paste( variables, collapse = " + " ) )
formula_registerd <- as.formula( paste( "registered ~ ", paste( variables, collapse = " + " ) ) )
formula_casual    <- as.formula( paste( "casual ~ ", paste( variables, collapse = " + " ) ) )
control <- trainControl( method = "cv", number = 10 )
data_train
ggplot( data_train, aes( registered ) ) + #
geom_histogram()
ggplot( data_train, aes( casual ) ) + #
geom_histogram()
ggplot( data_train, aes( log( casual + 1 ) ) ) + #
geom_histogram()
ExtractFeatures <- function( data )#
{#
    # 1. hour bins#
    # registered users #
    data$hour_registered <- with( data, #
#
        ifelse( hour <  6.5, 1, #
        ifelse( hour >= 20 , 2, #
        ifelse( hour >= 16  & hour <  18 , 3,#
        ifelse( hour >= 18  & hour <  20 , 4,#
        ifelse( hour >= 8.5 & hour <  16 , 5,#
        ifelse( hour <  8.5 & hour >= 7.5, 6, 7 ) ) ) ) ) )#
    )#
    # non-registered #
    data$hour_casual <- with( data, #
#
        ifelse( hour <  8.5, 1, #
        ifelse( hour >= 20 , 2, #
        ifelse( hour >= 8.5 & hour < 10, 3, 4 ) ) )#
    )#
#
    # 2. year bins, demand increases over time ; #
    #    thus create bins for every quarter of the two years ( 8 in total )#
    data$year_bins <- with( data,#
#
        ifelse( year == 2011 & month <= 3, 1,#
        ifelse( year == 2011 & month >  3 & month <= 6, 2,#
        ifelse( year == 2011 & month >  6 & month <= 9, 3,#
        ifelse( year == 2011 & month >  9, 4,#
        ifelse( year == 2012 & month <= 3, 5,#
        ifelse( year == 2012 & month >  3 & month <= 6, 6,#
        ifelse( year == 2012 & month >  6 & month <= 9, 7, 8 ) ) ) ) ) ) )#
    )#
#
    # 3. convert holiday and workingday into one variable#
    #    indicating whether its a holiday, weekend and workday#
    data$type <- with( data, #
#
        ifelse( holiday == 1, "holiday",#
        ifelse( holiday == 0 & workingday == 0, "weekend", "workday" ) ) #
    )#
#
    # 4. keep the needed variables, and convert discrete variables into factors #
    columns <- which( colnames(data) %in% c( "casual", "registered", variables ) )#
    data <- select( data, columns )#
    factor_col <- which( colnames(data) %in% #
                         c( "weather", "hour_casual", "hour_registered", "year_bins", "type" ) )                  #
    data <- modifyList( data, lapply( select( data, factor_col ), as.factor ) )#
#
    # 5. log transformation of dependent variables#
    data %>% mutate( casual = log( casual + 1 ),#
                     registered = log( registered + 1 ) )#
    return(data)#
}
data_train <- ExtractFeatures( data = data_train )
data[ , c( "hour", "weekday", "year", "month" ) := list( hour(datetime), #
                                                         lubridate::wday(datetime),#
                                                         year(datetime),#
                                                         month(datetime) ) ]#
#
# split into 80 / 20 percent and evaluate prediction accuracy on test set#
set.seed(1234) #
train_index <- createDataPartition( data$count, p = .8, list = FALSE )#
data_train  <- data[ train_index, ]#
data_test   <- data[ -train_index, ]
data <- fread("train.csv")
data[ , c( "hour", "weekday", "year", "month" ) := list( hour(datetime), #
                                                         lubridate::wday(datetime),#
                                                         year(datetime),#
                                                         month(datetime) ) ]#
#
# split into 80 / 20 percent and evaluate prediction accuracy on test set#
set.seed(1234) #
train_index <- createDataPartition( data$count, p = .8, list = FALSE )#
data_train  <- data[ train_index, ]#
data_test   <- data[ -train_index, ]#
rm(data)
data_train <- ExtractFeatures( data = data_train )
data_train
data = data_train
data <- data %>% mutate( casual = log( casual + 1 ),#
                             registered = log( registered + 1 ) )
data
data <- transform( data, #
                       casual     = log( casual + 1 ),#
                       registered = log( registered + 1 ) )
data
data_test
count <- data_test$count
data_test  <- ExtractFeatures( data = data_test )
data_test
control
model_rf1 <- train( formula_casual, #
                    data      = data_train, #
                    trControl = control, #
                    method    = "rf", ntree = 150 )
model_rf1
result_rf1 <- predict( model_rf1, newdata = data_test )
result_rf1
library(doParallel)
detectCluster()
?detect
registerDoParallel( cores = 2 )
model_rf2 <- train( formula_registerd, #
                    data      = data_train, #
                    trControl = control, #
                    method    = "rf", ntree = 150 )
count
result_rf2 <- predict( model_rf2, newdata = data_test )
predict_count <- ( exp(result_rf1) - 1 ) + ( exp(result_rf2) - 1 )
RMSE <- function( y, pred )#
{#
    sqrt( mean( ( y - pred )^2 ) )#
}
RMSE( count, predict_count  )
predict_count
result_rf1
data_test
data_train
data <- fread("train.csv")
data[ , c( "hour", "weekday", "year", "month" ) := list( hour(datetime), #
                                                         lubridate::wday(datetime),#
                                                         year(datetime),#
                                                         month(datetime) ) ]#
#
# split into 80 / 20 percent and evaluate prediction accuracy on test set#
set.seed(1234) #
train_index <- createDataPartition( data$count, p = .8, list = FALSE )#
data_train  <- data[ train_index, ]#
data_test   <- data[ -train_index, ]#
rm(data)
variables <- c( "weather", "temp", "humidity", "windspeed", #
                "type", "year_bins", "hour_registered", "hour_casual" )#
#
# putting it all together #
ExtractFeatures <- function( data )#
{#
    # 1. hour bins#
    # registered users #
    data$hour_registered <- with( data, #
#
        ifelse( hour <  6.5, 1, #
        ifelse( hour >= 20 , 2, #
        ifelse( hour >= 16  & hour <  18 , 3,#
        ifelse( hour >= 18  & hour <  20 , 4,#
        ifelse( hour >= 8.5 & hour <  16 , 5,#
        ifelse( hour <  8.5 & hour >= 7.5, 6, 7 ) ) ) ) ) )#
    )#
    # non-registered #
    data$hour_casual <- with( data, #
#
        ifelse( hour <  8.5, 1, #
        ifelse( hour >= 20 , 2, #
        ifelse( hour >= 8.5 & hour < 10, 3, 4 ) ) )#
    )#
#
    # 2. year bins, demand increases over time ; #
    #    thus create bins for every quarter of the two years ( 8 in total )#
    data$year_bins <- with( data,#
#
        ifelse( year == 2011 & month <= 3, 1,#
        ifelse( year == 2011 & month >  3 & month <= 6, 2,#
        ifelse( year == 2011 & month >  6 & month <= 9, 3,#
        ifelse( year == 2011 & month >  9, 4,#
        ifelse( year == 2012 & month <= 3, 5,#
        ifelse( year == 2012 & month >  3 & month <= 6, 6,#
        ifelse( year == 2012 & month >  6 & month <= 9, 7, 8 ) ) ) ) ) ) )#
    )#
#
    # 3. convert holiday and workingday into one variable#
    #    indicating whether its a holiday, weekend and workday#
    data$type <- with( data, #
#
        ifelse( holiday == 1, "holiday",#
        ifelse( holiday == 0 & workingday == 0, "weekend", "workday" ) ) #
    )#
#
    # 4. keep the needed variables, and convert discrete variables into factors #
    columns <- which( colnames(data) %in% c( "casual", "registered", variables ) )#
    data <- select( data, columns )#
    factor_col <- which( colnames(data) %in% #
                         c( "weather", "hour_casual", "hour_registered", "year_bins", "type" ) )                  #
    data <- modifyList( data, lapply( select( data, factor_col ), as.factor ) )#
#
    # 5. log transformation of dependent variables#
    data <- transform( data, #
                       casual     = log( casual + 1 ),#
                       registered = log( registered + 1 ) )#
    return(data)#
}#
#
# store the count for the test set #
count <- data_test$count#
#
data_train <- ExtractFeatures( data = data_train )#
data_test  <- ExtractFeatures( data = data_test )
data_train
data_test
control <- trainControl( method = "cv", number = 10 )#
#
RMSE <- function( y, pred )#
{#
    sqrt( mean( ( y - pred )^2 ) )#
}#
#
formula_casual    <- as.formula( paste( "casual ~ ", paste( variables, collapse = " + " ) ) )#
formula_registerd <- as.formula( paste( "registered ~ ", paste( variables, collapse = " + " ) ) )#
library(doParallel)#
registerDoParallel( cores = 2 )#
#
model_rf1 <- train( formula_casual, #
                    data      = data_train, #
                    trControl = control, #
                    method    = "rf", ntree = 150 )#
#
model_rf2 <- train( formula_registerd, #
                    data      = data_train, #
                    trControl = control, #
                    method    = "rf", ntree = 150 )
result_rf1 <- predict( model_rf1, newdata = data_test )#
result_rf2 <- predict( model_rf2, newdata = data_test )#
predict_count <- ( exp(result_rf1) - 1 ) + ( exp(result_rf2) - 1 )#
#
RMSE( count, predict_count  )
result_rf2
predict_count
data.table( count, predict_count )
count
data_train
data_test
result_rf1
data_train
data
data <- fread("train.csv")
data[ , c( "hour", "weekday", "year", "month" ) := list( hour(datetime), #
                                                         lubridate::wday(datetime),#
                                                         year(datetime),#
                                                         month(datetime) ) ]
data
formula_registerd
formula_casual
variables
variables[-7]
formula_casual    <- as.formula( paste( "casual ~ ", paste( variables[-8], collapse = " + " ) ) )#
formula_registerd <- as.formula( paste( "registered ~ ", paste( variables[-7], collapse = " + " ) ) )
formula_casual
variables[-7]
formula_casual    <- as.formula( paste( "casual ~ ", paste( variables[-7], collapse = " + " ) ) )#
formula_registerd <- as.formula( paste( "registered ~ ", paste( variables[-8], collapse = " + " ) ) )
formula_casual
registerDoParallel( cores = 2 )#
#
model_rf1 <- train( formula_casual, #
                    data      = data_train, #
                    trControl = control, #
                    method    = "rf", ntree = 150 )#
#
model_rf2 <- train( formula_registerd, #
                    data      = data_train, #
                    trControl = control, #
                    method    = "rf", ntree = 150 )#
#
result_rf1 <- predict( model_rf1, newdata = data_test )#
result_rf2 <- predict( model_rf2, newdata = data_test )#
#
predict_count <- ( exp(result_rf1) - 1 ) + ( exp(result_rf2) - 1 )#
RMSE( count, predict_count  )
formula_registerd
data_test
RMSE( data_test$casual, result_rf1  )
RMSE( data_test$registered, result_rf2 )
test <- rpart( formula_casual, data = data_train )
fancyRpartPlot(test)
test <- rpart( formula_registerd, data = data_train )
fancyRpartPlot(test)
test1 <- rpart( formula_casual, data = data_train )#
test2 <- rpart( formula_registerd, data = data_train )
result1 <- predict( test1, newdata = data_test )#
result2 <- predict( test2, newdata = data_test )
result2
RMSE( count, ( exp(result1) - 1 ) + ( exp(result2) - 1 ) )
?train
data_train
formula_casual
count
result1
RMSE( count, exp( result1 * result2 ) )
RMSE( count, exp( result1 + result2 ) )
predict_count <- ( exp(result_rf1) - 1 ) + ( exp(result_rf2) - 1 )#
RMSE( count, predict_count  )
data.table( count, predict_count )
RMSLE <- function( y, pred )#
{#
    ( log( y + 1) - log( pred + 1 ) )^2 %>% sum() %>% mean() %>% sqrt()#
}
RMSLE( count, predict_count  )
RMSLE <- function( y, pred )#
{#
    sqrt( sum( ( log( y + 1) - log( pred + 1 ) )^2 ) / length(y) )#
}
RMSLE( count, predict_count  )
predict_count <- ( exp(result_rf1) - 1 ) + ( exp(result_rf2) - 1 )#
RMSLE( count, predict_count )
data
data <- fread("train.csv")
data[ , datetime := ymd_hms(datetime) ]
data[ , c( "hour", "weekday", "year", "month" ) := list( hour(datetime), #
                                                         lubridate::wday(datetime),#
                                                         year(datetime),#
                                                         month(datetime) ) ]#
#
# split into 80 / 20 percent and evaluate prediction accuracy on test set#
set.seed(1234) #
train_index <- createDataPartition( data$count, p = .8, list = FALSE )#
data_train  <- data[ train_index, ]#
data_test   <- data[ -train_index, ]
variables <- c( "season", "weather", "temp", "humidity", "windspeed", #
                "type", "year_bins", "hour_registered", "hour_casual" )#
#
# putting it all together #
ExtractFeatures <- function( data )#
{#
    # 1. hour bins#
    # registered users #
    data$hour_registered <- with( data, #
#
        ifelse( hour <  6.5, 1, #
        ifelse( hour >= 20 , 2, #
        ifelse( hour >= 16  & hour <  18 , 3,#
        ifelse( hour >= 18  & hour <  20 , 4,#
        ifelse( hour >= 8.5 & hour <  16 , 5,#
        ifelse( hour <  8.5 & hour >= 7.5, 6, 7 ) ) ) ) ) )#
    )#
    # non-registered #
    data$hour_casual <- with( data, #
#
        ifelse( hour <  8.5, 1, #
        ifelse( hour >= 20 , 2, #
        ifelse( hour >= 8.5 & hour < 10, 3, 4 ) ) )#
    )#
#
    # 2. year bins, demand increases over time ; #
    #    thus create bins for every quarter of the two years ( 8 in total )#
    data$year_bins <- with( data,#
#
        ifelse( year == 2011 & month <= 3, 1,#
        ifelse( year == 2011 & month >  3 & month <= 6, 2,#
        ifelse( year == 2011 & month >  6 & month <= 9, 3,#
        ifelse( year == 2011 & month >  9, 4,#
        ifelse( year == 2012 & month <= 3, 5,#
        ifelse( year == 2012 & month >  3 & month <= 6, 6,#
        ifelse( year == 2012 & month >  6 & month <= 9, 7, 8 ) ) ) ) ) ) )#
    )#
#
    # 3. convert holiday and workingday into one variable#
    #    indicating whether its a holiday, weekend and workday#
    data$type <- with( data, #
#
        ifelse( holiday == 1, "holiday",#
        ifelse( holiday == 0 & workingday == 0, "weekend", "workday" ) ) #
    )#
#
    # 4. keep the needed variables, and convert discrete variables into factors #
    columns <- which( colnames(data) %in% c( "casual", "registered", variables ) )#
    data <- select( data, columns )#
    factor_col <- which( colnames(data) %in% #
                         c( "season", "weather", "hour_casual", "hour_registered", "year_bins", "type" ) )                #
    data <- modifyList( data, lapply( select( data, factor_col ), as.factor ) )#
#
    # 5. log transformation of dependent variables#
    data <- transform( data, casual     = log( casual + 1 ),#
                             registered = log( registered + 1 ) )#
    return(data)#
}#
#
# store the count for the test set #
count <- data_test$count#
#
data_train <- ExtractFeatures( data = data_train )#
data_test  <- ExtractFeatures( data = data_test )
variables
variables[-7]
formula_casual    <- as.formula( paste( "casual ~ ", paste( variables[-8], collapse = " + " ) ) )#
formula_registerd <- as.formula( paste( "registered ~ ", paste( variables[-9], collapse = " + " ) ) )
formula_casual
sapply( data_train, class )

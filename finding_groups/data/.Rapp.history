str(xgb_cv_1)
xgb_cv_1 <- xgb.cv(#
    params = xgb_params_1,#
    data = dtrain,#
    nrounds = 5, #
    nfold = 10,#
    # prediction = TRUE, # return the prediction using the final model #
    # showsd = TRUE, # standard deviation of loss across folds#
    stratified = TRUE, # sample is unbalanced; use stratified sampling#
    verbose = TRUE,#
    print.every.n = 1, #
    early.stop.round = 10#
)
xgb_cv_1 <- xgb.cv(#
    params = xgb_params_1,#
    data = dtrain,#
    nrounds = 10, #
    nfold = 10,#
    # prediction = TRUE, # return the prediction using the final model #
    # showsd = TRUE, # standard deviation of loss across folds#
    stratified = TRUE, # sample is unbalanced; use stratified sampling#
    # verbose = TRUE,#
    # print.every.n = 1, # associate with verbose  #
    early.stop.round = 10#
)
xgb_cv_1 <- xgb.cv(#
    params = xgb_params_1,#
    data = dtrain,#
    nrounds = 20, #
    nfold = 10,#
    # prediction = TRUE, # return the prediction using the final model #
    # showsd = TRUE, # standard deviation of loss across folds#
    stratified = TRUE, # sample is unbalanced; use stratified sampling#
    # verbose = TRUE,#
    # print.every.n = 1, # associate with verbose  #
    early.stop.round = 10#
)
library(ggplot2)
?readLines
if( runif(1) < 0.5 )#
    heads <- TRUE#
else #
    heads <- FALSE
if( runif(1) < 0.5 )#
{#
    heads <- TRUE#
}else #
    heads <- FALSE
if( runif(1) < 0.5 )#
{#
    heads <- TRUE#
}else #
    heads <- FALSE#
print(heads)
?sample
roll <- function(n) return( sample( 1:6, size = n, replace = TRUE ) )#
#
probtotk <- function( d, k, nreps ){#
    # sums <- numeric( length = nreps )#
    # for( rep in 1:nreps )#
    #    sums[rep] <- sum( roll(d) )#
    sums <- replicate( nreps, sum( roll(d) ) )#
#
    return( mean( sum == k ) )#
}
probtotk( 3, 8, 100 )
probtotk <- function( d, k, nreps ){#
    # sums <- numeric( length = nreps )#
    # for( rep in 1:nreps )#
    #    sums[rep] <- sum( roll(d) )#
    sums <- replicate( nreps, sum( roll(d) ) )#
#
    return( mean( sums == k ) )#
}#
#
probtotk( 3, 8, 100 )
replicate
?eval.parent
eval(2 ^ 2 ^ 3)
?openGraph
HairEyeColor
N <- 500#
p_heads <- 0.5#
#
flip <- sample( x = c( 1, 0 ), prob = c( p_heads, 1- p_heads ), #
                size = N, replace = TRUE )#
r <- cumsum(flip) #
n <- 1:N                    #
proportion_heads <- r / n
N = 500 # Specify the total number of flips, denoted N.#
pHeads = 0.5 # Specify underlying probability of heads.#
# Flip a coin N times and compute the running proportion of heads at each flip.#
# Generate a random sample of N flips (heads=1, tails=0):#
flipSequence = sample( x=c(0,1), prob=c(1-pHeads,pHeads), size=N, replace=TRUE )#
# Compute the running proportion of heads:#
r = cumsum( flipSequence ) # Cumulative sum: Number of heads at each step.#
n = 1:N                    # Number of flips at each step.#
runProp = r / n            # Component by component division.#
# Graph the running proportion:#
plot( n , runProp , type="o" , log="x" , col="skyblue" ,#
      xlim=c(1,N) , ylim=c(0.0,1.0) , cex.axis=1.5 ,#
      xlab="Flip Number" , ylab="Proportion Heads" , cex.lab=1.5 ,#
      main="Running Proportion of Heads" , cex.main=1.5 )#
# Plot a dotted horizontal reference line:#
abline( h=pHeads , lty="dotted" )#
# Display the beginning of the flip sequence:#
flipLetters = paste( c("T","H")[flipSequence[1:10]+1] , collapse="" )#
displayString = paste0( "Flip Sequence = " , flipLetters , "..." )#
text( N , .9 , displayString , adj=c(1,0.5) , cex=1.3 )#
# Display the relative frequency at the end of the sequence.#
text( N , .8 , paste("End Proportion =",runProp[N]) , adj=c(1,0.5) , cex=1.3 )
n
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point()
library(ggplot2)#
#
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point()
df <- data.frame( n = n, proportion_heads = proportion_heads )
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point()
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point() + theme_bw()
?geom_abline
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point() + theme_bw() +#
xlim( c( 1, N ) ) + ylim( c( 0.0, 1.0 ) ) +#
geom_abline( intercept = pHeads )#
labs( x = "Flip Number" , y = "Proportion Heads",#
      title = "Running Proportion of Heads" )
?geom_abline
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point() + theme_bw() +#
xlim( c( 1, N ) ) + ylim( c( 0.0, 1.0 ) ) +#
geom_abline( slope = pHeads )#
labs( x = "Flip Number" , y = "Proportion Heads",#
      title = "Running Proportion of Heads" )
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point() + theme_bw() +#
xlim( c( 1, N ) ) + ylim( c( 0.0, 1.0 ) ) +#
geom_abline( slope = pHeads ) +#
labs( x = "Flip Number" , y = "Proportion Heads",#
      title = "Running Proportion of Heads" )
set.seed(47405)#
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point() + theme_bw() +#
xlim( c( 1, N ) ) + ylim( c( 0.0, 1.0 ) ) +#
geom_abline( slope = pHeads ) +#
labs( x = "Flip Number" , y = "Proportion Heads",#
      title = "Running Proportion of Heads" )
set.seed(47405)#
N <- 500#
p_heads <- 0.5#
#
flip <- sample( x = c( 1, 0 ), prob = c( p_heads, 1- p_heads ), #
                size = N, replace = TRUE )#
r <- cumsum(flip) #
n <- 1:N                    #
proportion_heads <- r / n#
df <- data.frame( n = n, proportion_heads = proportion_heads )#
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point() + theme_bw() +#
xlim( c( 1, N ) ) + ylim( c( 0.0, 1.0 ) ) +#
geom_abline( slope = pHeads ) +#
labs( x = "Flip Number" , y = "Proportion Heads",#
      title = "Running Proportion of Heads" )
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( aes( shape = 1 ) ) + geom_line() + theme_bw() +#
xlim( c( 1, N ) ) + ylim( c( 0.0, 1.0 ) ) +#
geom_abline( slope = pHeads ) +#
labs( x = "Flip Number" , y = "Proportion Heads",#
      title = "Running Proportion of Heads" )
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( shape = 1 ) + geom_line() + theme_bw() +#
xlim( c( 1, N ) ) + ylim( c( 0.0, 1.0 ) ) +#
geom_abline( slope = pHeads ) +#
labs( x = "Flip Number" , y = "Proportion Heads",#
      title = "Running Proportion of Heads" )
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( shape = 1 ) + geom_line() + theme_bw() +#
xlim( c( 1, N ) ) + ylim( c( 0.0, 1.0 ) ) +#
geom_hline( slope = pHeads ) +#
labs( x = "Flip Number" , y = "Proportion Heads",#
      title = "Running Proportion of Heads" )
?geom_hline
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( shape = 1 ) + geom_line() + theme_bw() +#
xlim( c( 1, N ) ) + ylim( c( 0.0, 1.0 ) ) +#
geom_hline( yintercept = pHeads ) +#
labs( x = "Flip Number" , y = "Proportion Heads",#
      title = "Running Proportion of Heads" )
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( shape = "o", color = "skyblue" ) + geom_line() + theme_bw() +#
xlim( c( 1, N ) ) + ylim( c( 0.0, 1.0 ) ) +#
geom_hline( yintercept = pHeads ) +#
labs( x = "Flip Number" , y = "Proportion Heads",#
      title = "Running Proportion of Heads" )
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( shape = 1, color = "skyblue" ) + geom_line() + theme_bw() +#
xlim( c( 1, N ) ) + ylim( c( 0.0, 1.0 ) ) +#
geom_hline( yintercept = pHeads ) +#
labs( x = "Flip Number" , y = "Proportion Heads",#
      title = "Running Proportion of Heads" )
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( shape = 1, size = 3, color = "skyblue" ) + #
geom_line( color = "skyblue" ) + theme_bw() +#
xlim( c( 1, N ) ) + ylim( c( 0.0, 1.0 ) ) +#
geom_hline( yintercept = pHeads ) +#
labs( x = "Flip Number" , y = "Proportion Heads",#
      title = "Running Proportion of Heads" )
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( shape = 1, size = 3, color = "skyblue" ) + #
geom_line( color = "skyblue" ) + theme_bw() +#
xlim( c( 1, N ) ) + ylim( c( 0.0, 1.0 ) ) +#
geom_hline( yintercept = pHeads ) +#
scale_x_log10() +#
labs( x = "Flip Number" , y = "Proportion Heads",#
      title = "Running Proportion of Heads" )
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( shape = 1, size = 3, color = "skyblue" ) + #
geom_line( color = "skyblue" ) + theme_bw() +#
xlim( c( 1, N ) ) + ylim( c( 0.0, 1.0 ) ) +#
geom_hline( yintercept = pHeads, shape = "dotted" ) +#
scale_x_log10() +#
labs( x = "Flip Number" , y = "Proportion Heads",#
      title = "Running Proportion of Heads" )
?geom_hline
?geom_line
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( shape = 1, size = 3, color = "skyblue" ) + #
geom_line( color = "skyblue" ) + theme_bw() +#
xlim( c( 1, N ) ) + ylim( c( 0.0, 1.0 ) ) +#
geom_hline( yintercept = pHeads, linetype = "dotted" ) +#
scale_x_log10() +#
labs( x = "Flip Number" , y = "Proportion Heads",#
      title = "Running Proportion of Heads" )
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( shape = 1, size = 3, color = "skyblue" ) + #
geom_line( color = "skyblue" ) + theme_bw() +#
xlim( c( 1, N ) ) + ylim( c( 0.0, 1.0 ) ) +#
geom_hline( yintercept = pHeads, linetype = "dotted" ) +#
labs( x = "Flip Number" , y = "Proportion Heads",#
      title = "Running Proportion of Heads" )
plot <- ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( shape = 1, size = 3, color = "skyblue" ) + #
geom_line( color = "skyblue" ) + theme_bw() +#
xlim( c( 1, N ) ) + ylim( c( 0.0, 1.0 ) ) +#
geom_hline( yintercept = p_heads, linetype = "dotted" ) +#
labs( x = "Flip Number" , y = "Proportion Heads",#
      title = "Running Proportion of Heads" )
class(plot)
flip
?annotate
flip_letters <- paste( c( "T", "H" )[ flip[1:10] + 1 ] , collapse = "" )#
string <- paste( "Flip Sequence = ", flipLetters, sep = "..." )
plot <- ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( shape = 1, size = 3, color = "skyblue" ) + #
geom_line( color = "skyblue" ) + theme_bw() +#
xlim( c( 1, N ) ) + ylim( c( 0.0, 1.0 ) ) +#
geom_hline( yintercept = p_heads, linetype = "dotted" ) +#
annotate( "text", x = N, y = 0.8, string ) +#
annotate( "text", x = N, y = 0.8, paste( "End Proportion =", proportion_heads[N]) ) +#
labs( x = "Flip Number" , y = "Proportion Heads",#
      title = "Running Proportion of Heads" )
plot
string
flip_letters <- paste( c( "T", "H" )[ flip[1:10] + 1 ] , collapse = "" )#
string <- paste( "Flip Sequence = ", flipLetters, "..." )
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( shape = 1, size = 3, color = "skyblue" ) + #
geom_line( color = "skyblue" ) + theme_bw() +#
xlim( c( 1, N ) ) + ylim( c( 0.0, 1.0 ) ) +#
geom_hline( yintercept = p_heads, linetype = "dotted" ) +#
annotate( "text", x = N, y = 0.8, string )
N
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( shape = 1, size = 3, color = "skyblue" ) + #
geom_line( color = "skyblue" ) + theme_bw() +#
xlim( c( 1.0, N ) ) + ylim( c( 0.0, 1.0 ) )
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( shape = 1, size = 3, color = "skyblue" ) + #
geom_line( color = "skyblue" ) + theme_bw() +#
xlim( c( 1.0, N ) ) + ylim( c( 0.0, 1.0 ) ) +#
geom_hline( yintercept = p_heads, linetype = "dotted" ) +#
annotate( "text", x = N, y = 0.8, string )
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( shape = 1, size = 3, color = "skyblue" ) + #
geom_line( color = "skyblue" ) + theme_bw() +#
# xlim( c( 1, N ) ) + ylim( c( 0.0, 1.0 ) ) +#
geom_hline( yintercept = p_heads, linetype = "dotted" ) +#
annotate( "text", x = N, y = 0.8, string )
class(string)
?annotate
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( shape = 1, size = 3, color = "skyblue" ) + #
geom_line( color = "skyblue" ) + theme_bw() +#
scale_y_continuous( lim = c( 0.0, 1.0 ) ) +#
geom_hline( yintercept = p_heads, linetype = "dotted" )
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( shape = 1, size = 3, color = "skyblue" ) + #
geom_line( color = "skyblue" ) + theme_bw() +#
scale_y_continuous( lim = c( 0.0, 1.0 ) ) +#
geom_hline( yintercept = p_heads, linetype = "dotted" ) +#
annotate( "text", x = N, y = 0.8, label = string ) +#
annotate( "text", x = N, y = 0.8, paste( "End Proportion =", proportion_heads[N]) ) +#
labs( x = "Flip Number" , y = "Proportion Heads",#
      title = "Running Proportion of Heads" )
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( shape = 1, size = 3, color = "skyblue" ) + #
geom_line( color = "skyblue" ) + theme_bw() +#
xlim( c( 1, N ) ) + ylim( c( 0.0, 1.0 ) ) +#
geom_hline( yintercept = p_heads, linetype = "dotted" ) +#
annotate( "text", x = 1 y = 1, label = string )
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( shape = 1, size = 3, color = "skyblue" ) + #
geom_line( color = "skyblue" ) + theme_bw() +#
xlim( c( 1, N ) ) + ylim( c( 0.0, 1.0 ) ) +#
geom_hline( yintercept = p_heads, linetype = "dotted" ) +#
annotate( "text", x = 1, y = 1, label = string )
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( shape = 1, size = 3, color = "skyblue" ) + #
geom_line( color = "skyblue" ) + theme_bw() +#
xlim( c( 1, N ) ) + ylim( c( 0.0, 1.0 ) ) +#
geom_hline( yintercept = p_heads, linetype = "dotted" ) +#
annotate( "text", x = N - 50, y = 1, label = string )
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( shape = 1, size = 3, color = "skyblue" ) + #
geom_line( color = "skyblue" ) + theme_bw() +#
xlim( c( 1, N ) ) + ylim( c( 0.0, 1.0 ) ) +#
geom_hline( yintercept = p_heads, linetype = "dotted" ) +#
annotate( "text", x = N - 50, y = 1, label = string, size = 16 )
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( shape = 1, size = 3, color = "skyblue" ) + #
geom_line( color = "skyblue" ) + theme_bw() +#
xlim( c( 1, N ) ) + ylim( c( 0.0, 1.0 ) ) +#
geom_hline( yintercept = p_heads, linetype = "dotted" ) +#
annotate( "text", x = N - 50, y = 1, label = string, size = 8 )
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( shape = 1, size = 3, color = "skyblue" ) + #
geom_line( color = "skyblue" ) + theme_bw() +#
xlim( c( 1, N ) ) + ylim( c( 0.0, 1.0 ) ) +#
geom_hline( yintercept = p_heads, linetype = "dotted" ) +#
annotate( "text", x = N - 100, y = 1, label = string, size = 6 )
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( shape = 1, size = 3, color = "skyblue" ) + #
geom_line( color = "skyblue" ) + theme_bw() +#
xlim( c( 1, N ) ) + ylim( c( 0.0, 1.0 ) ) +#
geom_hline( yintercept = p_heads, linetype = "dotted" ) +#
annotate( "text", x = N - 100, y = 1, label = string, size = 6 ) +#
annotate( "text", x = N - 100, y = 0.8, paste( "End Proportion =", proportion_heads[N]) ) +#
labs( x = "Flip Number" , y = "Proportion Heads",#
      title = "Running Proportion of Heads" )
?ylim
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( shape = 1, size = 3, color = "skyblue" ) + #
geom_line( color = "skyblue" ) + theme_bw() +#
lims( x = c( 1, N ), y = c( 0.0, 1.0 ) ) +#
geom_hline( yintercept = p_heads, linetype = "dotted" ) +#
annotate( "text", x = N - 100, y = 1, label = string, size = 6 ) +#
annotate( "text", x = N - 100, y = 0.8, paste( "End Proportion =", proportion_heads[N]) ) +#
labs( x = "Flip Number" , y = "Proportion Heads",#
      title = "Running Proportion of Heads" )
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( shape = 1, size = 3, color = "skyblue" ) + #
geom_line( color = "skyblue" ) + theme_bw() +#
lims( x = c( 1, N ), y = c( 0.0, 1.0 ) ) +#
geom_hline( yintercept = p_heads, linetype = "dotted" ) +#
annotate( "text", x = N - 100, y = 1, label = string, size = 6 ) +#
annotate( "text", x = N - 100, y = 0.1, paste( "End Proportion =", proportion_heads[N]) ) +#
labs( x = "Flip Number" , y = "Proportion Heads",#
      title = "Running Proportion of Heads" )
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( shape = 1, size = 3, color = "skyblue" ) + #
geom_line( color = "skyblue" ) + theme_bw() +#
lims( x = c( 1, N ), y = c( 0.0, 1.0 ) ) +#
geom_hline( yintercept = p_heads, linetype = "dotted" ) +#
annotate( "text", x = N - 100, y = 1, label = string, size = 6 )
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( shape = 1, size = 3, color = "skyblue" ) + #
geom_line( color = "skyblue" ) + theme_bw() +#
lims( x = c( 1, N ), y = c( 0.0, 1.0 ) ) +#
geom_hline( yintercept = p_heads, linetype = "dotted" ) +#
annotate( "text", x = N - 100, y = 1, label = string, size = 6 ) +#
annotate( "text", x = N - 100, y = 1, paste( "End Proportion =", proportion_heads[N]) ) +#
labs( x = "Flip Number" , y = "Proportion Heads",#
      title = "Running Proportion of Heads" )
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( shape = 1, size = 3, color = "skyblue" ) + #
geom_line( color = "skyblue" ) + theme_bw() +#
lims( x = c( 1, N ), y = c( 0.0, 1.0 ) ) +#
geom_hline( yintercept = p_heads, linetype = "dotted" ) +#
annotate( "text", x = N - 100, y = 1, label = string, size = 6 ) +#
annotate( "text", x = N - 100, y = 1, label = paste( "End Proportion =", proportion_heads[N]) ) +#
labs( x = "Flip Number" , y = "Proportion Heads",#
      title = "Running Proportion of Heads" )
ggplot( df, aes( n, proportion_heads ) ) +#
geom_point( shape = 1, size = 3, color = "skyblue" ) + #
geom_line( color = "skyblue" ) + theme_bw() +#
lims( x = c( 1, N ), y = c( 0.0, 1.0 ) ) +#
geom_hline( yintercept = p_heads, linetype = "dotted" ) +#
annotate( "text", x = N - 100, y = 1, label = string, size = 6 ) +#
annotate( "text", x = N - 100, y = 0.8, label = paste( "End Proportion =", proportion_heads[N]) ) +#
labs( x = "Flip Number" , y = "Proportion Heads",#
      title = "Running Proportion of Heads" )
CoinToss <- function( N, p_heads ){#
    # flip a coin N times and compute the running proportion of #
    # heads at each flip #
    ##
    # Parameters#
    # ----------#
    # N: int#
    #   specify the total number of flips#
    ##
    # p_heads : float#
    #   specify the underlying probability of the coin coming up as heads.#
    # #
    # Returns#
    # -------#
    # plot: ggplot#
    #   simulation of the coin toss#
#
    N <- 500#
    p_heads <- 0.5#
    # generate a random sample of N flips. heads = 1, tails = 0#
    flip <- sample( x = c( 1, 0 ), prob = c( p_heads, 1- p_heads ), #
                    size = N, replace = TRUE )#
#
    # compute the proportion of flips that comes up as head#
    r <- cumsum(flip) #
    n <- 1:N#
    proportion_heads <- r / n#
    df <- data.frame( n = n, proportion_heads = proportion_heads )#
#
    # display the beginning of the flip sequence, #
    # and the final proportion as text in the plot#
    flip_letters <- paste( c( "T", "H" )[ flip[1:10] + 1 ] , collapse = "" )#
    sequence <- paste( "Flip Sequence = ", flipLetters, "..." )#
    proportion <- paste( "End Proportion =", proportion_heads[N] )#
#
    plot <- ggplot( df, aes( n, proportion_heads ) ) +#
            geom_point( shape = 1, size = 3, color = "skyblue" ) + #
            geom_line( color = "skyblue" ) + theme_bw() +#
            lims( x = c( 1, N ), y = c( 0.0, 1.0 ) ) +#
            geom_hline( yintercept = p_heads, linetype = "dotted" ) +#
            annotate( "text", x = N - 100, y = 1, label = sequence, size = 4 ) +#
            annotate( "text", x = N - 100, y = 0.8, label = proportion, size = 4 ) +#
            labs( x = "Flip Number" , y = "Proportion Heads",#
                  title = "Running Proportion of Heads" )#
    return(plot)#
}
CoinToss
CoinToss <- function( N, p_heads )#
{#
    # flip a coin N times and compute the running proportion of #
    # heads at each flip #
    ##
    # Parameters#
    # ----------#
    # N: int#
    #   specify the total number of flips#
    ##
    # p_heads : float#
    #   specify the underlying probability of the coin coming up as heads.#
    # #
    # Returns#
    # -------#
    # plot: ggplot#
    #   simulation of the coin toss#
    ##
    # Example#
    # -------#
    # set.seed(47405)#
    # N <- 500#
    # p_heads <- 0.5#
    # CoinToss( N, p_heads )#
#
    # generate a random sample of N flips. heads = 1, tails = 0#
    flip <- sample( x = c( 1, 0 ), prob = c( p_heads, 1- p_heads ), #
                    size = N, replace = TRUE )#
#
    # compute the proportion of flips that comes up as head#
    r <- cumsum(flip) #
    n <- 1:N#
    proportion_heads <- r / n#
    df <- data.frame( n = n, proportion_heads = proportion_heads )#
#
    # display the beginning of the flip sequence, #
    # and the final proportion as text in the plot#
    flip_letters <- paste( c( "T", "H" )[ flip[1:10] + 1 ] , collapse = "" )#
    sequence <- paste( "Flip Sequence = ", flipLetters, "..." )#
    proportion <- paste( "End Proportion =", proportion_heads[N] )#
#
    plot <- ggplot( df, aes( n, proportion_heads ) ) +#
            geom_point( shape = 1, size = 3, color = "skyblue" ) + #
            geom_line( color = "skyblue" ) + theme_bw() +#
            lims( x = c( 1, N ), y = c( 0.0, 1.0 ) ) +#
            geom_hline( yintercept = p_heads, linetype = "dotted" ) +#
            annotate( "text", x = N - 100, y = 1, label = sequence, size = 4 ) +#
            annotate( "text", x = N - 100, y = 0.8, label = proportion, size = 4 ) +#
            labs( x = "Flip Number" , y = "Proportion Heads",#
                  title = "Running Proportion of Heads" )#
    return(plot)#
}
CoinToss
set.seed(47405)#
N <- 500#
p_heads <- 0.5#
CoinToss( N, p_heads )
CoinToss <- function( N, p_heads )#
{#
    # flip a coin N times and compute the running proportion of #
    # heads at each flip #
    ##
    # Parameters#
    # ----------#
    # N: int#
    #   specify the total number of flips#
    ##
    # p_heads : float#
    #   specify the underlying probability of the coin coming up as heads.#
    # #
    # Returns#
    # -------#
    # plot: ggplot#
    #   simulation of the coin toss#
    ##
    # Example#
    # -------#
    # set.seed(47405)#
    # N <- 500#
    # p_heads <- 0.5#
    # CoinToss( N, p_heads )#
#
    # generate a random sample of N flips. heads = 1, tails = 0#
    flip <- sample( x = c( 1, 0 ), prob = c( p_heads, 1- p_heads ), #
                    size = N, replace = TRUE )#
#
    # compute the proportion of flips that comes up as head#
    r <- cumsum(flip) #
    n <- 1:N#
    proportion_heads <- r / n#
    df <- data.frame( n = n, proportion_heads = proportion_heads )#
#
    # display the beginning of the flip sequence, #
    # and the final proportion as text in the plot#
    flip_letters <- paste( c( "T", "H" )[ flip[1:10] + 1 ] , collapse = "" )#
    sequence <- paste( "Flip Sequence = ", flipLetters, "..." )#
    proportion <- paste( "End Proportion =", proportion_heads[N] )#
#
    plot <- ggplot( df, aes( n, proportion_heads ) ) +#
            geom_point( shape = 1, size = 3, color = "skyblue" ) + #
            geom_line( color = "skyblue" ) + theme_bw() +#
            lims( x = c( 1, N ), y = c( 0.0, 1.0 ) ) +#
            geom_hline( yintercept = p_heads, linetype = "dotted" ) +#
            annotate( "text", x = N - 100, y = 1, label = sequence, size = 4 ) +#
            annotate( "text", x = N - 100, y = 0.95, label = proportion, size = 4 ) +#
            labs( x = "Flip Number" , y = "Proportion Heads",#
                  title = "Running Proportion of Heads" )#
    return(plot)#
}#
#
set.seed(47405)#
N <- 500#
p_heads <- 0.5#
CoinToss( N, p_heads )
meanval = 0.0               # Specify mean of distribution.#
sdval = 0.2                 # Specify standard deviation of distribution.#
xlow  = meanval - 3.5*sdval # Specify low end of x-axis.#
xhigh = meanval + 3.5*sdval # Specify high end of x-axis.#
dx = sdval/10               # Specify interval width on x-axis#
# Specify comb of points along the x axis:#
x = seq( from = xlow , to = xhigh , by = dx )#
# Compute y values, i.e., probability density at each value of x:#
y = ( 1/(sdval*sqrt(2*pi)) ) * exp( -.5 * ((x-meanval)/sdval)^2 )
plot( x , y , type="h" , lwd=1 , cex.axis=1.5#
    , xlab="x" , ylab="p(x)" , cex.lab=1.5 ,#
    , main="Normal Probability Density" , cex.main=1.5 )#
lines( x , y , lwd=3 ,  col="skyblue" )#
# Approximate the integral as the sum of width * height for each interval.#
area = sum( dx * y )#
# Display info in the graph.#
text( meanval-sdval , .9*max(y) , bquote( paste(mu ," = " ,.(meanval)) )#
      , adj=c(1,.5) , cex=1.5 )#
text( meanval-sdval , .75*max(y) , bquote( paste(sigma ," = " ,.(sdval)) )#
      , adj=c(1,.5) , cex=1.5 )#
text( meanval+sdval , .9*max(y) , bquote( paste(Delta , "x = " ,.(dx)) )#
      , adj=c(0,.5) , cex=1.5 )#
text( meanval+sdval , .75*max(y) ,#
      bquote(#
        paste( sum(,x,) , " " , Delta , "x p(x) = " , .(signif(area,3)) )#
      ) , adj=c(0,.5) , cex=1.5 )
library(ggplot2)
HDIofGrid = function( probMassVec , credMass=0.95 ) {#
  # Arguments:#
  #   probMassVec is a vector of probability masses at each grid point.#
  #   credMass is the desired mass of the HDI region.#
  # Return value:#
  #   A list with components:#
  #   indices is a vector of indices that are in the HDI#
  #   mass is the total mass of the included indices#
  #   height is the smallest component probability mass in the HDI#
  # Example of use: For determining HDI of a beta(30,12) distribution#
  #   approximated on a grid:#
  #   > probDensityVec = dbeta( seq(0,1,length=201) , 30 , 12 )#
  #   > probMassVec = probDensityVec / sum( probDensityVec )#
  #   > HDIinfo = HDIofGrid( probMassVec )#
  #   > show( HDIinfo )#
  sortedProbMass = sort( probMassVec , decreasing=TRUE )#
  HDIheightIdx = min( which( cumsum( sortedProbMass ) >= credMass ) )#
  HDIheight = sortedProbMass[ HDIheightIdx ]#
  HDImass = sum( probMassVec[ probMassVec >= HDIheight ] )#
  return( list( indices = which( probMassVec >= HDIheight ) ,#
                mass = HDImass , height = HDIheight ) )#
}
BernGrid = function( Theta , pTheta , Data , plotType=c("Points","Bars")[2] ,#
                     showCentTend=c("Mean","Mode","None")[3] ,#
                     showHDI=c(TRUE,FALSE)[2] , HDImass=0.95 ,#
                     showpD=c(TRUE,FALSE)[2] , nToPlot=length(Theta) ) {#
  # Theta is vector of values between 0 and 1.#
  # pTheta is prior probability mass at each value of Theta#
  # Data is vector of 0's and 1's.#
  # Check for input errors:#
  if ( any( Theta > 1 | Theta < 0 ) ) {#
    stop("Theta values must be between 0 and 1")#
  }#
  if ( any( pTheta < 0 ) ) {#
    stop("pTheta values must be non-negative")#
  }#
  if ( !isTRUE(all.equal( sum(pTheta) , 1.0 )) )  {#
    stop("pTheta values must sum to 1.0")#
  }#
  if ( !all( Data == 1 | Data == 0 ) ) {#
    stop("Data values must be 0 or 1")#
  }#
  # Create summary values of Data#
  z = sum( Data ) # number of 1's in Data#
  N = length( Data ) #
#
  # Compute the Bernoulli likelihood at each value of Theta:#
  pDataGivenTheta = Theta^z * (1-Theta)^(N-z)#
  # Compute the evidence and the posterior via Bayes' rule:#
  pData = sum( pDataGivenTheta * pTheta )#
  pThetaGivenData = pDataGivenTheta * pTheta / pData#
  # Plot the results.#
  layout( matrix( c( 1,2,3 ) ,nrow=3 ,ncol=1 ,byrow=FALSE ) ) # 3x1 panels#
  par( mar=c(3,3,1,0) , mgp=c(2,0.7,0) , mai=c(0.5,0.5,0.3,0.1) ) # margins#
  cexAxis = 1.33#
  cexLab = 1.75#
  # convert plotType to notation used by plot:#
  if ( plotType=="Points" ) { plotType="p" }#
  if ( plotType=="Bars" ) { plotType="h" }#
  dotsize = 5 # how big to make the plotted dots#
  barsize = 5 # how wide to make the bar lines    #
  # If the comb has a zillion teeth, it's too many to plot, so plot only a#
  # thinned out subset of the teeth.#
  nteeth = length(Theta)#
  if ( nteeth > nToPlot ) {#
    thinIdx = round( seq( 1, nteeth , length=nteeth ) )#
  } else { #
    thinIdx = 1:nteeth #
  }#
#
  # Plot the prior.#
  yLim = c(0,1.1*max(c(pTheta,pThetaGivenData)))#
  plot( Theta[thinIdx] , pTheta[thinIdx] , type=plotType , #
        pch="." , cex=dotsize , lwd=barsize ,#
        xlim=c(0,1) , ylim=yLim , cex.axis=cexAxis ,#
        xlab=bquote(theta) , ylab=bquote(p(theta)) , cex.lab=cexLab ,#
        main="Prior" , cex.main=1.5 , col="skyblue" )#
  if ( showCentTend != "None" ) {#
    if ( showCentTend == "Mean" ) {#
      meanTheta = sum( Theta * pTheta ) #
      if ( meanTheta > .5 ) {#
         textx = 0 ; textadj = c(0,1)#
      } else {#
        textx = 1 ; textadj = c(1,1)#
      }#
      text( textx , yLim[2] ,#
            bquote( "mean=" * .(signif(meanTheta,3)) ) ,#
            cex=2.0 , adj=textadj )#
    }#
    if ( showCentTend == "Mode" ) {#
      modeTheta = Theta[ which.max( pTheta ) ]#
      if ( modeTheta > .5 ) {#
        textx = 0 ; textadj = c(0,1)#
      } else {#
        textx = 1 ; textadj = c(1,1)#
      }#
      text( textx , yLim[2] ,#
            bquote( "mode=" * .(signif(modeTheta,3)) ) ,#
            cex=2.0 , adj=textadj )#
    }#
  }#
  # Mark the highest density interval. HDI points are not thinned in the plot.#
  if ( showHDI ) {#
    HDIinfo = HDIofGrid( pTheta , credMass=HDImass )#
    points( Theta[ HDIinfo$indices ] , #
            rep( HDIinfo$height , length( HDIinfo$indices ) ) , #
            pch="-" , cex=1.0 )#
    text( mean( Theta[ HDIinfo$indices ] ) , HDIinfo$height ,#
          bquote( .(100*signif(HDIinfo$mass,3)) * "% HDI" ) ,#
          adj=c(0.5,-1.5) , cex=1.5 )#
    # Mark the left and right ends of the waterline. #
    # Find indices at ends of sub-intervals:#
    inLim = HDIinfo$indices[1] # first point#
    for ( idx in 2:(length(HDIinfo$indices)-1) ) {#
      if ( ( HDIinfo$indices[idx] != HDIinfo$indices[idx-1]+1 ) | # jumps on left, OR#
             ( HDIinfo$indices[idx] != HDIinfo$indices[idx+1]-1 ) ) { # jumps on right#
        inLim = c(inLim,HDIinfo$indices[idx]) # include idx#
      }#
    }#
    inLim = c(inLim,HDIinfo$indices[length(HDIinfo$indices)]) # last point#
    # Mark vertical lines at ends of sub-intervals:#
    for ( idx in inLim ) {#
      lines( c(Theta[idx],Theta[idx]) , c(-0.5,HDIinfo$height) , type="l" , lty=2 , #
             lwd=1.5 )#
      text( Theta[idx] , HDIinfo$height , bquote(.(round(Theta[idx],3))) ,#
            adj=c(0.5,-0.1) , cex=1.2 )#
    }#
  }#
  # Plot the likelihood: p(Data|Theta)#
  plot( Theta[thinIdx] , pDataGivenTheta[thinIdx] , type=plotType , #
        pch="." , cex=dotsize , lwd=barsize ,#
        xlim=c(0,1) , ylim=c(0,1.1*max(pDataGivenTheta)) , cex.axis=cexAxis ,#
        xlab=bquote(theta) , ylab=bquote( "p(D|" * theta * ")" ) , cex.lab=cexLab ,#
        main="Likelihood" , cex.main=1.5 , col="skyblue" )#
  if ( z > .5*N ) { textx = 0 ; textadj = c(0,1) }#
  else { textx = 1 ; textadj = c(1,1) }#
  text( textx ,1.0*max(pDataGivenTheta) ,cex=2.0#
    ,bquote( "Data: z=" * .(z) * ",N=" * .(N) ) ,adj=textadj )#
  if ( showCentTend != "None" ) {#
    if ( showCentTend == "Mean" ) {#
      meanTheta = sum( Theta * pDataGivenTheta ) #
      if ( meanTheta > .5 ) {#
        textx = 0 ; textadj = c(0,1)#
      } else {#
        textx = 1 ; textadj = c(1,1)#
      }#
      text( textx , 0.7*max(pDataGivenTheta) ,#
            bquote( "mean=" * .(signif(meanTheta,3)) ) ,#
            cex=2.0 , adj=textadj )#
    }#
    if ( showCentTend == "Mode" ) {#
      modeTheta = Theta[ which.max( pDataGivenTheta ) ]#
      if ( modeTheta > .5 ) {#
        textx = 0 ; textadj = c(0,1)#
      } else {#
        textx = 1 ; textadj = c(1,1)#
      }#
      text( textx , 0.7*max(pDataGivenTheta) ,#
            bquote( "mode=" * .(signif(modeTheta,3)) ) ,#
            cex=2.0 , adj=textadj )#
    }#
  }#
  # Plot the posterior.#
  yLim = c(0,1.1*max(c(pTheta,pThetaGivenData)))#
  plot( Theta[thinIdx] , pThetaGivenData[thinIdx] , type=plotType , #
        pch="." , cex=dotsize , lwd=barsize ,#
        xlim=c(0,1) , ylim=yLim , cex.axis=cexAxis ,#
        xlab=bquote(theta) , ylab=bquote( "p(" * theta * "|D)" ) , cex.lab=cexLab ,#
        main="Posterior" , cex.main=1.5 , col="skyblue" )#
  if ( showCentTend != "None" ) {#
    if ( showCentTend == "Mean" ) {#
      meanTheta = sum( Theta * pThetaGivenData ) #
      if ( meanTheta > .5 ) {#
        textx = 0 ; textadj = c(0,1)#
      } else {#
        textx = 1 ; textadj = c(1,1)#
      }#
      text( textx , yLim[2] ,#
            bquote( "mean=" * .(signif(meanTheta,3)) ) ,#
            cex=2.0 , adj=textadj )#
    }#
    if ( showCentTend == "Mode" ) {#
      modeTheta = Theta[ which.max( pThetaGivenData ) ]#
      if ( modeTheta > .5 ) {#
        textx = 0 ; textadj = c(0,1)#
      } else {#
        textx = 1 ; textadj = c(1,1)#
      }#
      text( textx , yLim[2] ,#
            bquote( "mode=" * .(signif(modeTheta,3)) ) ,#
            cex=2.0 , adj=textadj )#
    }#
  }#
  # Plot marginal likelihood pData:#
  if ( showpD ) {#
    meanTheta = sum( Theta * pThetaGivenData ) #
    if ( meanTheta > .5 ) {#
      textx = 0 ; textadj = c(0,1)#
    } else {#
      textx = 1 ; textadj = c(1,1)#
    }#
    text( textx , 0.75*max(pThetaGivenData) , cex=2.0 ,#
            bquote( "p(D)=" * .(signif(pData,3)) ) ,adj=textadj )#
  }#
  # Mark the highest density interval. HDI points are not thinned in the plot.#
  if ( showHDI ) {#
    HDIinfo = HDIofGrid( pThetaGivenData , credMass=HDImass )#
    points( Theta[ HDIinfo$indices ] , #
            rep( HDIinfo$height , length( HDIinfo$indices ) ) , #
            pch="-" , cex=1.0 )#
    text( mean( Theta[ HDIinfo$indices ] ) , HDIinfo$height ,#
             bquote( .(100*signif(HDIinfo$mass,3)) * "% HDI" ) ,#
             adj=c(0.5,-1.5) , cex=1.5 )#
    # Mark the left and right ends of the waterline. #
    # Find indices at ends of sub-intervals:#
    inLim = HDIinfo$indices[1] # first point#
    for ( idx in 2:(length(HDIinfo$indices)-1) ) {#
      if ( ( HDIinfo$indices[idx] != HDIinfo$indices[idx-1]+1 ) | # jumps on left, OR#
        ( HDIinfo$indices[idx] != HDIinfo$indices[idx+1]-1 ) ) { # jumps on right#
        inLim = c(inLim,HDIinfo$indices[idx]) # include idx#
      }#
    }#
    inLim = c(inLim,HDIinfo$indices[length(HDIinfo$indices)]) # last point#
    # Mark vertical lines at ends of sub-intervals:#
    for ( idx in inLim ) {#
      lines( c(Theta[idx],Theta[idx]) , c(-0.5,HDIinfo$height) , type="l" , lty=2 , #
             lwd=1.5 )#
      text( Theta[idx] , HDIinfo$height , bquote(.(round(Theta[idx],3))) ,#
            adj=c(0.5,-0.1) , cex=1.2 )#
    }#
  }#
  return( pThetaGivenData )#
} # end of function
Theta = seq( 0 , 1 , length=1001 )  # Specify fine comb for Theta.#
pTheta = pmin( Theta , 1-Theta )#
pTheta = pTheta/sum(pTheta)#
Data = c(rep(0,3),rep(1,1))#
#
posterior = BernGrid( Theta, pTheta , Data , plotType="Bars" ,#
                      showCentTend="Mode" , showHDI=TRUE , showpD=FALSE )
library(ggplot2)#
library(dplyr)
sessionInfo()
data.frame(a = c(81, 82, 81 + 100),#
                  b = c(219, 219, 219 + 200))
data.frame(a = c(81, 82, 81 + 100),#
                  b = c(219, 219, 219 + 200)) %>%#
    group_by(a, b)
ata.frame(a = c(81, 82, 81 + 100),#
                  b = c(219, 219, 219 + 200)) %>%#
    group_by(a, b) %>%#
    do(data_frame(x = seq(0, 1, .001), y = dbeta(x, .$a, .$b)))
data.frame(a = c(81, 82, 81 + 100),#
                  b = c(219, 219, 219 + 200)) %>%#
    group_by(a, b) %>%#
    do(data_frame(x = seq(0, 1, .001), y = dbeta(x, .$a, .$b)))
data.frame(a = c(81, 82, 81 + 100),#
                  b = c(219, 219, 219 + 200)) %>%#
    group_by(a, b) %>%#
    do(data_frame(x = seq(0, 1, .001), y = dbeta(x, .$a, .$b))) %>%#
    mutate(Parameters = paste0("\u03B1 = ", a, ", \u03B2 = ", b))
"\u03B1"
library(latexexp)
TeX(sprintf("$\\alpha = $"))
latex2exp::TeX(sprintf("$\\alpha = $"))
data.frame( a = c( 81, 82, 81 + 100 ),#
                   b = c( 219, 219, 219 + 200 ) ) %>%#
    group_by( a, b ) %>%#
    do( data_frame( x = seq( 0, 1, .001 ), y = dbeta( x, .$a, .$b ) ) ) %>%#
    mutate( Parameters = paste0( "\u03B1 = ", a, ", \u03B2 = ", b ) ) %>%#
    mutate( Parameters = latex2exp::TeX(sprintf("$\\alpha = $", a) ) %>%#
    ungroup() %>%#
    mutate( Parameters = factor( Parameters, levels = unique(Parameters) ) )
)
d
data.frame( a = c( 81, 82, 81 + 100 ),#
                   b = c( 219, 219, 219 + 200 ) ) %>%#
    group_by( a, b ) %>%#
    do( data_frame( x = seq( 0, 1, .001 ), y = dbeta( x, .$a, .$b ) ) ) %>%#
    mutate( Parameters = paste0( "\u03B1 = ", a, ", \u03B2 = ", b ) ) %>%#
    mutate( Parameters = latex2exp::TeX(sprintf("$\\alpha = $", a) ) ) %>%#
    ungroup() %>%#
    mutate( Parameters = factor( Parameters, levels = unique(Parameters) ) )
seq( 0, 1, 3 )
seq( 0, 1, 0.3 )
?seq
seq( 0, 1, by = 0.3 )
sim <- data.frame( a = c( 81, 82, 81 + 100 ),#
                   b = c( 219, 219, 219 + 200 ) ) %>%#
       group_by( a, b ) %>%#
       do( data_frame( x = seq( 0, 1, by = .001 ), y = dbeta( x, .$a, .$b ) ) ) %>%#
       mutate( Parameters = paste0( "\u03B1 = ", a, ", \u03B2 = ", b ) ) %>%#
       ungroup() %>%#
       mutate( Parameters = factor( Parameters, levels = unique(Parameters) ) )
sim
sim %>% filter( a == 81 ) %>%#
    ggplot(aes(x, y, color = Parameters)) + geom_line() +#
    xlim(0, .5) + ylab("Density of beta")
sim %>% filter( a == 81 )
sim %>% filter( a == 81 ) %>% data.frame
sim %>% filter( a == 81 | a == 82 )
sim %>% #
filter( a == 81 | a == 82 ) %>%#
ggplot( aes( x, y, color = Parameters ) ) + geom_line() +#
xlim( 0, .5 ) + ylab("Density of beta")
PlotBeta <- function(sim)#
{#
    ggplot( sim, aes( x, y, color = Parameters ) ) + geom_line() +#
    xlim( 0, .5 ) + ylab("Density of beta")#
}#
PlotBeta( filter( sim, a == 81 ) )
PlotBeta( sim = sim )
PlotBeta <- function(sim)#
{#
    ggplot( sim, aes( x, y, color = Parameters ) ) + geom_line() +#
    xlim( 0, .5 ) + ylab("Density of beta") + theme_bw()#
}#
PlotBeta( sim = filter( sim, a == 81 ) )
# environment setting#
library(caret)#
#library(dplyr)#
library(ggplot2)#
library(data.table)#
#library(reshape2)#
#
setwd("/Users/ethen/Business-Analytics/finding_groups/data")#
rm( list = ls() )
data_sku <- fread("DATA_2.01_SKU.csv")#
data_sku
ggplot( data_sku, aes( CV, ADS ) ) + geom_point() + #
labs( title = "SKU Example", y = "Average Daily Sales", x = "Coefficient of Variation" ) + #
geom_hline( yintercept = 4, color = "blue" ) + #
geom_vline( xintercept = .2, color = "blue" )
d <- dist( scale(data_sku), method = "euclidean" )#
cluster <- hclust( d, method = "ward.D" )
cluster
as.factor( cutree( cluster, k = 3 ) )
data_sku[ ,  groups := as.factor( cutree( cluster, k = 3 ) ) ]
data_sku
ggplot( data_sku, aes( CV, ADS, color = groups ) ) + geom_point() + #
labs( x = "Coefficient of Variation", y = "Average Daily Sales", #
      title = "SKU Example" )
data_hr <- fread("DATA_2.02_HR.csv")#
head(data_hr)
scale(data_hr)
scaled <- scale(data_hr)#
data_hr_scaled <- data.table(data_hr)#
findCorrelation( cor(hr_scaled), cutoff = 0.8, names = TRUE )
findCorrelation( cor(data_hr_scaled), cutoff = 0.8, names = TRUE )
hr_scaled
data_hr_scaled
data_hr_scaled[ , c( "LPE", "NP" ) ]
data_hr_scaled[ , c( "LPE", "NP" ), with = FALSE ]
ggplot( melt( data_hr_scaled[ , c( "LPE", "NP" ), with = FALSE ] ), #
        aes( value, fill = variable ) ) + #
geom_histogram( alpha = .4, position = "identity" )
data_hr_scaled[ , c( "LPE", "NP" ), with = FALSE ]
scaled <- scale(data_hr)#
data_hr_scaled <- data.table(scaled)#
findCorrelation( cor(data_hr_scaled), cutoff = 0.8, names = TRUE )
melt( data_hr_scaled[ , c( "LPE", "NP" ), with = FALSE ] )
sessionInfo()
library(data.table)
sessionInfo()
ggplot( melt( data_hr_scaled[ , c( "LPE", "NP" ), with = FALSE ] ), #
        aes( value, fill = variable ) ) + #
geom_histogram( alpha = .4, position = "identity" )
ggplot( melt( data_hr_scaled[ , c( "LPE", "NP" ), with = FALSE ] ), #
        aes( value, fill = variable ) ) + #
geom_histogram( alpha = .4 )
ggplot( melt( data_hr_scaled[ , c( "LPE", "NP" ), with = FALSE ] ), #
        aes( value, fill = variable ) ) + #
geom_histogram( alpha = .4, position = "identity" )
data_hr_scaled
hr_scaled[ , -1, with = FALSE ]
data_hr_scaled[ , -1, with = FALSE ]
d <- dist( data_hr_scaled[ , -1, with = FALSE ], method = "euclidean" ) #
cluster <- hclust( d, method = "ward.D" )#
plot(cluster)
data_hr_scaled[ ,  groups := as.factor( cutree( cluster, k = 3 ) ) ]
data_hr_scaled
aggregate( .~ groups, data = data_hr, FUN = median )
aggregate( .~ groups, data = data_hr_scaled, FUN = median )
data_hr_scaled[ , lapply( .SD, median ), by = groups ]
table(data_hr_scaled$groups)
hr_agg <- data_hr_scaled[ , lapply( .SD, median ), by = groups ]
t <- table(data_hr_scaled$groups)#
hr_agg[ , proportion := t / sum(t) ]
hr_agg
d <- dist( data_hr_scaled[ , -1, with = FALSE ], method = "euclidean" ) #
cluster <- hclust( d, method = "ward.D" )#
# plot(cluster) # dendogram#
data_hr_scaled[ ,  groups := as.factor( cutree( cluster, k = 4 ) ) ]#
#
# aggregation #
# hr_agg <- aggregate( .~ groups, data = data_hr_scaled, FUN = median )#
hr_agg <- data_hr_scaled[ , lapply( .SD, median ), by = groups ]#
#
# proportion size#
t <- table(data_hr_scaled$groups)#
hr_agg[ , proportion := t / sum(t) ]
hr_agg
hr_agg[ , proportion := t / sum(t) ][ order(-proportion) ]
library(ggradar)
?ggradar
?add_rownames
hr_agg
mtcars
?rescale
library(scales)
groups <- as.factor( cutree( cluster, k = 4 ) )#
data_hr_scaled[ ,  groups := groups ]
data_hr
data_hr[ , groups := groups ]
data_hr <- fread("DATA_2.02_HR.csv")
hr_agg
hr_agg[ , -c( "groups", "proportion" ), with = FALSE ]
hr_agg2 <- hr_agg[ , -c( "groups", "proportion" ), with = FALSE ]
hr_agg2
hr_agg2[ , lapply( .SD, rescale ) ]
hr_agg2
hr_agg2
hr_agg2 <- hr_agg2[ , lapply( .SD, rescale ) ]
hr_agg2
ggradar(hr_agg2)
library(extrafont)
library(extrafont)#
#
## Facebook #
download.file("http://social-fonts.com/assets/fonts/facebook-letter-faces/facebook-letter-faces.ttf", "/Library/Fonts/facebook-letter-faces.ttf", method="curl")#
#
font_import(pattern = 'facebook-letter-faces.ttf', prompt=FALSE)#
## Google #
download.file("http://social-fonts.com/assets/fonts/product-sans/product-sans.ttf", "/Library/Fonts/product-sans.ttf", method="curl")#
#
font_import(pattern = 'product-sans.ttf', prompt=FALSE)#
## Airbnb #
download.file("https://dl.dropboxusercontent.com/u/2364714/airbnb_ttf_fonts/Circular%20Air-Medium%203.46.45%20PM.ttf", "/Library/Fonts/Circular Air-Medium 3.46.45 PM.ttf", method="curl")#
#
download.file("https://dl.dropboxusercontent.com/u/2364714/airbnb_ttf_fonts/Circular%20Air-Bold%203.46.45%20PM.ttf", "/Library/Fonts/Circular Air-Bold 3.46.45 PM.ttf", method="curl")#
#
font_import(pattern = 'Circular', prompt=FALSE)#
## Etsy #
download.file("https://www.etsy.com/assets/type/Guardian-EgypTT-Text-Regular.ttf", "/Library/Fonts/Guardian-EgypTT-Text-Regular.ttf", method="curl")#
#
font_import(pattern = 'Guardian-EgypTT-Text-Regular.ttf', prompt=FALSE)#
## Twitter #
download.file("http://social-fonts.com/assets/fonts/pico-black/pico-black.ttf", "/Library/Fonts/pico-black.ttf", method="curl")#
#
download.file("http://social-fonts.com/assets/fonts/arista-light/arista-light.ttf", "/Library/Fonts/arista-light.ttf", method="curl")#
#
font_import(pattern = 'pico-black.ttf', prompt=FALSE)#
font_import(pattern = 'arista-light.ttf', prompt=FALSE)
ggradar(hr_agg2)
download.file("https://dl.dropboxusercontent.com/u/2364714/airbnb_ttf_fonts/Circular Air-Light 3.46.45 PM.ttf", "/Library/Fonts/Circular Air-Light 3.46.45 PM.ttf", method="curl")#
#
extrafont::font_import(pattern = 'Circular', prompt=FALSE)
ggradar(hr_agg2)
?ggradar
hr_agg2
hr_agg2[ , groups := groups ]
hr_agg2
hr_agg2[ , groups := as.factor( 1:nrow(hr_agg2) ) ]
hr_agg2
ggradar(hr_agg2)
hr_agg2 <- hr_agg[ , -c( "groups", "proportion" ), with = FALSE ]#
hr_agg2 <- hr_agg2[ , lapply( .SD, rescale ) ]
hr_agg2
ggradar(hr_agg2)
paste0( "group", 1:nrow(hr_agg2) )
as.factor( paste0( "group", 1:nrow(hr_agg2) ) )
mtcars
hr_agg2[ , groups := as.factor( paste0( "group", 1:nrow(hr_agg2) ) ) ]#
#
ggradar(hr_agg2)
hr_agg2 <- hr_agg[ , -c( "groups", "proportion" ), with = FALSE ]#
hr_agg2 <- hr_agg2[ , lapply( .SD, rescale ) ]#
hr_agg2[ , groups := as.character( paste0( "group", 1:nrow(hr_agg2) ) ) ]#
#
ggradar(hr_agg2)
hr_agg2 <- hr_agg[ , -c( "groups", "proportion" ), with = FALSE ]#
hr_agg2 <- hr_agg2[ , lapply( .SD, rescale ) ]
rownames(hr_agg2)
rownames(hr_agg2) <- paste0( "group", 1:nrow(hr_agg2) )
hr_agg2
ggradar(hr_agg2)
?add_rownames
library(dplyr)
mtcars
mtcars %>%#
     add_rownames( var = "group" )
mtcars %>%#
     add_rownames( var = "group" ) %>%#
     mutate_each(funs(rescale), -group)
mtcars %>%#
     add_rownames( var = "group" ) %>%#
     mutate_each(funs(rescale), -group) %>%#
     tail(4) %>% select(1:10) -> mtcars_radar
mtcars_radar
ggradar(mtcars_radar)
mtcars_radar
hr_agg2 <- hr_agg[ , -c( "groups", "proportion" ), with = FALSE ]#
hr_agg2 <- hr_agg2[ , lapply( .SD, rescale ) ]
names(hr_agg2)
name <- colnames(hr_agg2)#
hr_agg2[ , groups := as.factor( paste0( "group", 1:nrow(hr_agg2) ) ) ]#
setcolorder( hr_agg2, name, "groups" )
name
paste( name, "groups", collapse = "" )
c( name, "groups" )
hr_agg2 <- hr_agg[ , -c( "groups", "proportion" ), with = FALSE ]#
hr_agg2 <- hr_agg2[ , lapply( .SD, rescale ) ]#
name <- colnames(hr_agg2)
hr_agg2[ , groups := as.factor( paste0( "group", 1:nrow(hr_agg2) ) ) ]#
setcolorder( hr_agg2, c( "groups", name ) )
hr_agg2 <- hr_agg[ , -c( "groups", "proportion" ), with = FALSE ]#
hr_agg2 <- hr_agg2[ , lapply( .SD, rescale ) ]#
name <- colnames(hr_agg2)
name
c( "groups", name )
hr_agg2[ , groups := as.factor( paste0( "group", 1:nrow(hr_agg2) ) ) ]#
setcolorder( hr_agg2, c( "groups", name ) )
hr_agg2
name
?setcolorder
hr_agg2 <- hr_agg[ , -c( "groups", "proportion" ), with = FALSE ]#
hr_agg2 <- hr_agg2[ , lapply( .SD, rescale ) ]#
name <- colnames(hr_agg2)#
hr_agg2[ , groups := as.factor( paste0( "group", 1:nrow(hr_agg2) ) ) ]
name
colnames(hr_agg2) != "groups"
name <- colnames(hr_agg2)#
setcolorder( hr_agg2, c( "groups", name[ name != "groups" ] ) )
ggradar(hr_agg2)
ggradar(hr_agg2) + facet_wrap( ~ groups )
ggradar(hr_agg2) + facet_wrap( . ~ groups )
hr_agg2
ggradar(hr_agg2) + facet_wrap( ~ groups )
ggradar(hr_agg2) + facet_grid( ~ groups )
facet_grid( . ~ groups )
ggradar(hr_agg2) + facet_grid( . ~ groups )
plot <- ggradar(hr_agg2)
str(plot)
plot$data
plot
?dput
